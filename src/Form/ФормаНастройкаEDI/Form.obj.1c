
&НаКлиенте
Перем МестныйКэш, РассчитанныйНаборСвойств, ИниКонфигурация, ИмяПланаВидовХарактеристикСвойствОбъектов Экспорт;

// функции для совместимости кода
&НаКлиенте
Функция сбисПолучитьФорму(ИмяФормы)
	Если ТипЗнч(ЭтаФорма) = Тип("УправляемаяФорма") Тогда
		Попытка
			ЭтотОбъект="";
		Исключение
		КонецПопытки;
		Возврат ПолучитьФорму("ВнешняяОбработка.СБИС.Форма."+ИмяФормы);
	КонецЕсли;
	Возврат ЭтотОбъект.ПолучитьФорму(ИмяФормы);
КонецФункции
&НаКлиенте
Функция сбисЭлементФормы(Форма,ИмяЭлемента)
	Если ТипЗнч(ЭтаФорма) = Тип("УправляемаяФорма") Тогда
		Возврат Форма.Элементы.Найти(ИмяЭлемента);
	КонецЕсли;
	Возврат Форма.ЭлементыФормы.Найти(ИмяЭлемента);
КонецФункции

Процедура ЗначениеВРеквизитФормы(ТаблицаНастроек, Парам)
	
	КартинкиСтрок = ЭлементыФормы.ДеревоНастроек.Колонки.Отмечен.КартинкиСтрок;
	
	ДеревоНастроек = ТаблицаНастроек;
	ЭлементыФормы.ДеревоНастроек.СоздатьКолонки();
	
	ЭлементыФормы.ДеревоНастроек.Колонки.ТорговаяСеть.ТекстШапки = "Торговая сеть / свойства";
	
	ЭлементыФормы.ДеревоНастроек.Колонки.Отмечен.Ширина = 10;
	ЭлементыФормы.ДеревоНастроек.Колонки.Отмечен.ДанныеФлажка = "Отмечен";
	ЭлементыФормы.ДеревоНастроек.Колонки.Отмечен.Данные = Ложь;
	ЭлементыФормы.ДеревоНастроек.Колонки.Отмечен.ТолькоПросмотр = Ложь;
	ЭлементыФормы.ДеревоНастроек.Колонки.Отмечен.ТекстШапки = "";
	ЭлементыФормы.ДеревоНастроек.Колонки.Отмечен.ИзменениеРазмера = ИзменениеРазмераКолонки.НеИзменять;
	ЭлементыФормы.ДеревоНастроек.Колонки.Отмечен.РежимРедактирования = РежимРедактированияКолонки.Непосредственно;
	ЭлементыФормы.ДеревоНастроек.Колонки.Отмечен.КартинкиСтрок = КартинкиСтрок;
	
	ЭлементыФормы.ДеревоНастроек.Колонки.Настройка.Видимость = Ложь;
	ЭлементыФормы.ДеревоНастроек.Колонки.Создан.Видимость = Ложь;
	ЭлементыФормы.ДеревоНастроек.Колонки.ИмяНабора.Видимость = Ложь;
	ЭлементыФормы.ДеревоНастроек.Колонки.ИмяСвойства.Видимость = Ложь;
	
КонецПроцедуры

Процедура КопироватьУзел(Источник, Приемник)
	
	Для Каждого СтрокаИсточник ИЗ Источник.Строки Цикл
		СтрокаПриемник = Приемник.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПриемник, СтрокаИсточник);

		КопироватьУзел(СтрокаИсточник, СтрокаПриемник);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДеревоНастроекПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	ПроставитьПометкиВниз(МестныйКэш, ТекущиеДанные, ТекущиеДанные.Отмечен);
	УстановитьОтмеченУРодителя(МестныйКэш, ТекущиеДанные);
	УстановитьОтмеченОтметитьВсе(МестныйКэш);
	
КонецПроцедуры

Процедура УстановитьОтмеченОтметитьВсе(Кэш)
	
	ОтметитьВсе = Истина;
	
	Для Каждого ТекРодитель из ДеревоНастроек.Строки Цикл
		ОтметитьВсе = ОтметитьВсе И (ТекРодитель.Отмечен ИЛИ ТекРодитель.Создан);
	КонецЦикла;
	
КонецПроцедуры

Процедура ДеревоНастроекПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ДанныеСтроки.Создан Тогда	
		ОформлениеСтроки.Ячейки.Отмечен.ОтображатьКартинку = Истина;
		ОформлениеСтроки.Ячейки.Отмечен.Картинка = Элемент.Колонки.Отмечен.КартинкиСтрок;
		ОформлениеСтроки.Ячейки.Отмечен.ОтображатьФлажок = Ложь;
	КонецЕсли;
	
КонецПроцедуры

//&НаСервереБезКонтекста
Функция КопироватьДерево(Источник)
	
	ДеревоОбъект = Новый ДеревоЗначений;
	ДеревоОбъект.Колонки.Добавить("Отмечен", Новый ОписаниеТипов("Булево"));
	ДеревоОбъект.Колонки.Добавить("ТорговаяСеть", Новый ОписаниеТипов("Строка"));
	ДеревоОбъект.Колонки.Добавить("Настройка", Новый ОписаниеТипов("Строка"));
	ДеревоОбъект.Колонки.Добавить("Создан", Новый ОписаниеТипов("Булево"));
	ДеревоОбъект.Колонки.Добавить("ИмяНабора", Новый ОписаниеТипов("Строка"));
	ДеревоОбъект.Колонки.Добавить("ИмяСвойства", Новый ОписаниеТипов("Строка"));
	
	КопироватьУзел(Источник, ДеревоОбъект);
	
	Возврат ДеревоОбъект;
	
КонецФункции

//------------------------------------------------------

&НаКлиенте
Процедура ПоказатьФорму(Кэш) Экспорт
	
	Отказ = Ложь;
	ИниКонфигурация = Кэш.ФормаНастроекОбщее.ПолучитьИниКонфигурацияДляДополнительныхСведений(Кэш, Отказ);
	МестныйКэш = Кэш;
	
	ЭтаФорма.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОтметитьВсе = Ложь;
	
	Если МестныйКэш.ини.Свойство("ДополнительныеСведения") И МестныйКэш.ини.ДополнительныеСведения <> Неопределено Тогда
		НаборСвойств = МестныйКэш.ини.ДополнительныеСведения.НаборСвойств;
	Иначе
		Возврат;
	КонецЕсли;
	
	РассчитанныйНаборСвойств = МестныйКэш.ФормаНастроекОбщее.ПолучитьРассчитанныеДанные(НаборСвойств, Отказ);
	
	ИмяПланаВидовХарактеристикСвойствОбъектов = Неопределено;
	фрм = МестныйКэш.ГлавноеОкно.СбисНайтиФормуФункции("ИмяПланаВидовХарактеристикСвойствОбъектов", "Документ_Шаблон");
	Если фрм <> Ложь Тогда
		ИмяПланаВидовХарактеристикСвойствОбъектов = фрм.ИмяПланаВидовХарактеристикСвойствОбъектов(ИниКонфигурация);
	КонецЕсли;
	
	ПриОткрытииНаСервере(РассчитанныйНаборСвойств, ИмяПланаВидовХарактеристикСвойствОбъектов);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНастроекОтмеченПриИзменении(Элемент)
	
	Если НЕ МестныйКэш.ПараметрыСистемы.Клиент.УправляемоеПриложение Тогда
		Элементы = Неопределено;	
	Иначе
		ТекущиеДанные = Элементы.ДеревоНастроек.ТекущиеДанные;
		ПроставитьПометкиВниз(МестныйКэш, ТекущиеДанные, ТекущиеДанные.Отмечен);
		УстановитьОтмеченУРодителя(МестныйКэш, ТекущиеДанные);
		
	КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСоздатьСвойства(Команда)
	
	Отказ = Ложь;
	
	МассивОтмеченных = Новый Массив;
	ПолучитьОтмеченные(МестныйКэш, ДеревоНастроек, МассивОтмеченных);
	
	Если МассивОтмеченных.Количество() = 0 Тогда
		Возврат;	
	КонецЕсли;
	
	Результат = СоздатьСвойстваНаКлиенте(МассивОтмеченных, Отказ);
	
	Если Отказ Тогда
	 	Сообщить(Результат.methodName + " " + Результат.message);
	Иначе
		Сообщить("Создание завершено !");
	КонецЕсли;
	
	ОтметитьВсе(МестныйКэш, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтметитьВсе(Команда)
	
	Если МестныйКэш.ПараметрыСистемы.Клиент.УправляемоеПриложение Тогда
		ОтметитьВсе = Не ОтметитьВсе;
	КонецЕсли;
	
	ОтметитьВсе(МестныйКэш, ОтметитьВсе);
	
КонецПроцедуры



&НаСервере
Процедура ПриОткрытииНаСервере(Знач НаборСвойств, ИмяПланаВидовХарактеристикСвойствОбъектов)
	
	СформироватьДеревоНастроекНаСервере(НаборСвойств, ИмяПланаВидовХарактеристикСвойствОбъектов);
	
КонецПроцедуры

&НаСервере
Функция СформироватьДеревоНастроекНаСервере(НаборСвойств, ИмяПланаВидовХарактеристикСвойствОбъектов)
	
	ТекущиеРеквизитыИСведения = ПолучитьВсеСозданныеВБазеРеквизитыИСведения(НаборСвойств, ИмяПланаВидовХарактеристикСвойствОбъектов);
	ТаблицаНастроек = СформироватьДеревоНастроек(НаборСвойств, ТекущиеРеквизитыИСведения);
	
	ПроставитьСозданУРодителя(ТаблицаНастроек);
	
	ЗначениеВРеквизитФормы(ТаблицаНастроек, "ДеревоНастроек");
	
КонецФункции

&НаСервере
Функция ПроставитьСозданУРодителя(ТаблицаНастроек)
	
	Для Каждого ТекРодитель ИЗ ТаблицаНастроек.Строки Цикл
		
		Создан = Истина;
		
		Для Каждого ТекПотомок ИЗ ТекРодитель.Строки Цикл
			Создан = Создан И ТекПотомок.Создан;	
		КонецЦикла;
		
		ТекРодитель.Создан = Создан;
		
	КонецЦикла;
	
КонецФункции


//&НаСервереБезКонтекста
Функция ПолучитьВсеСозданныеВБазеРеквизитыИСведения(НаборСвойств, ИмяПланаВидовХарактеристикСвойствОбъектов)
	
	ТекущиеРеквизитыИСведения = Новый Массив;
	
	Попытка
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ДополнительныеРеквизитыИСведения.Наименование КАК Наименование,
			|	ДополнительныеРеквизитыИСведения.Ссылка КАК Ссылка

			|ИЗ
			|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
			|ГДЕ
			|	НЕ ДополнительныеРеквизитыИСведения.ПометкаУдаления";
			
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ДополнительныеРеквизитыИСведения", ИмяПланаВидовХарактеристикСвойствОбъектов); 
		
		ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			Ключ = ВыборкаДетальныеЗаписи.Наименование;
			
			Попытка
				Ключ = Ключ + "_" + Строка(ВыборкаДетальныеЗаписи.Ссылка.НазначениеСвойства);	
			Исключение
			КонецПопытки;
			
			ТекущиеРеквизитыИСведения.Добавить(Ключ);
			
		КонецЦикла;
		
	Исключение
	КонецПопытки;
	
	Возврат ТекущиеРеквизитыИСведения;
	
КонецФункции

//&НаСервереБезКонтекста
Функция СформироватьДеревоНастроек(НаборСвойств, ТекущиеРеквизитыИСведения)
	
	ТаблицаНастроек = Новый ТаблицаЗначений;
	ТаблицаНастроек.Колонки.Добавить("ТорговаяСеть", Новый ОписаниеТипов("Строка"));
	ТаблицаНастроек.Колонки.Добавить("Отмечен", Новый ОписаниеТипов("Булево"));
	ТаблицаНастроек.Колонки.Добавить("Настройка", Новый ОписаниеТипов("Строка"));
	ТаблицаНастроек.Колонки.Добавить("Создан", Новый ОписаниеТипов("Булево"));
	ТаблицаНастроек.Колонки.Добавить("ИмяНабора", Новый ОписаниеТипов("Строка"));
	ТаблицаНастроек.Колонки.Добавить("ИмяСвойства", Новый ОписаниеТипов("Строка"));
	
	Для Каждого ТекНабор ИЗ НаборСвойств Цикл
		
		Если ЭтоСвойстваСоздаватьАвтоматически(ТекНабор) Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ТекСвойство ИЗ ТекНабор.Значение.мФайл Цикл
			
			НоваяСтрока = ТаблицаНастроек.Добавить();
			НоваяСтрока.ТорговаяСеть = ПолучитьРассчитанноеЗначение(ТекНабор, "КрасивоеНазвание", ТекНабор.Ключ);
			
			Подсказка = ПолучитьРассчитанноеЗначение(ТекСвойство, "Подсказка", "");
			Наименование = ПолучитьРассчитанноеЗначение(ТекСвойство, "Наименование", ТекСвойство.Ключ);

			НоваяСтрока.Настройка = Наименование;
			Если НЕ ПустаяСтрока(Подсказка) Тогда
				НоваяСтрока.Настройка = НоваяСтрока.Настройка + " (" + Подсказка + ")";	
			КонецЕсли;
		
			НоваяСтрока.ИмяНабора = ТекНабор.Ключ;
			НоваяСтрока.ИмяСвойства = ТекСвойство.Ключ;
			
			Ключ = Наименование;
			
			Попытка
				Ключ = Ключ + "_" + Строка(ТекСвойство.Значение.НазначениеСвойства);	
			Исключение
			КонецПопытки;
			
			Если ТекущиеРеквизитыИСведения.Найти(Ключ) <> Неопределено Тогда
				НоваяСтрока.Создан = Истина;	
			КонецЕсли;

		КонецЦикла;
	КонецЦикла;
	
	ТаблицаНастроек = ТаблицаЗначенийВДеревоЗначений(ТаблицаНастроек, "ТорговаяСеть");
	
	Возврат КопироватьДерево(ТаблицаНастроек);
	
КонецФункции

//&НаСервереБезКонтекста
Функция ТаблицаЗначенийВДеревоЗначений(ТаблицаЗначений, ГруппировкаКолонка)
	
   ПостроительЗапроса = Новый ПостроительЗапроса;
   ПостроительЗапроса.ИсточникДанных  = Новый ОписаниеИсточникаДанных(ТаблицаЗначений);
   ПостроительЗапроса.ДобавлениеПредставлений = ТипДобавленияПредставлений.НеДобавлять;
   ПостроительЗапроса.ИсточникДанных.Колонки[ГруппировкаКолонка].Измерение = Истина;
   
   ПостроительЗапроса.ЗаполнитьНастройки();
   ПостроительЗапроса.Выполнить();
   
   ДеревоЗначений = ПостроительЗапроса.Результат.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией); 
   
   Для Каждого ТекТорговаяСеть ИЗ ДеревоЗначений.Строки Цикл
	   Для Каждого ТекНастройка ИЗ ТекТорговаяСеть.Строки Цикл
		   ТекНастройка.ТорговаяСеть = ТекНастройка.Настройка;
	   КонецЦикла;
   КонецЦикла;
   
   Возврат ДеревоЗначений; 
   
КонецФункции

//&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьРассчитанноеЗначение(ТекСвойство, ИмяСвойства, ЗначениеПоУмолчанию)
	
	ЗначениеСвойства = Неопределено;
	Если ТекСвойство.Значение.Свойство(ИмяСвойства, ЗначениеСвойства) Тогда
		Возврат ЗначениеСвойства;
	Иначе
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	
КонецФункции

//&НаКлиентеНаСервереБезКонтекста
Функция ЭтоСвойстваСоздаватьАвтоматически(ТекНабор)
	
	Если ТекНабор.Значение.Свойство("СоздаватьАвтоматически") И ТекНабор.Значение.СоздаватьАвтоматически = Истина Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Функция ПолучитьОтмеченПоПотомкам(Кэш, ТекРодитель)
	
	Отмечен = Ложь;
	
	Если Кэш.ПараметрыСистемы.Клиент.УправляемоеПриложение Тогда
		Потомки = ТекРодитель.ПолучитьЭлементы();
	Иначе
		Потомки = ТекРодитель.Строки;
	КонецЕсли;
	
	Для каждого Потомок из Потомки Цикл
		Отмечен = Отмечен ИЛИ Потомок.Отмечен;
	КонецЦикла;
	
	Возврат Отмечен;
	
КонецФункции

&НаКлиенте
Процедура ПроставитьПометкиВниз(Кэш, ТекущиеДанные, Отметка)
	
	Если Кэш.ПараметрыСистемы.Клиент.УправляемоеПриложение Тогда
		Потомки = ТекущиеДанные.ПолучитьЭлементы();
	Иначе
		Потомки = ТекущиеДанные.Строки;
	КонецЕсли;
	
	Для каждого Потомок из Потомки Цикл
		Потомок.Отмечен = Отметка И НЕ Потомок.Создан;
		ПроставитьПометкиВниз(Кэш, Потомок, Отметка);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтмеченУРодителя(Кэш, ТекущиеДанные)
	
	Если Кэш.ПараметрыСистемы.Клиент.УправляемоеПриложение Тогда
		Родитель = ТекущиеДанные.ПолучитьРодителя();
	Иначе
		Родитель = ТекущиеДанные.Родитель;
	КонецЕсли;
	
	Если Родитель = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	Если Кэш.ПараметрыСистемы.Клиент.УправляемоеПриложение Тогда
		Потомки = Родитель.ПолучитьЭлементы();
	Иначе
		Потомки = Родитель.Строки;
	КонецЕсли;
	
	Отмечен = Ложь;
	
	Для Каждого Потомок из Потомки Цикл
		Отмечен = Отмечен ИЛИ Потомок.Отмечен;
	КонецЦикла;
	
	Родитель.Отмечен = Отмечен;
	
	УстановитьОтмеченУРодителя(Кэш, Родитель);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьОтмеченные(Кэш, Узел, МассивОтмеченных)
	
	Если Кэш.ПараметрыСистемы.Клиент.УправляемоеПриложение Тогда
		Потомки = Узел.ПолучитьЭлементы();
	Иначе
		Потомки = Узел.Строки;
	КонецЕсли;
	
	Для Каждого Потомок Из Потомки Цикл
		Если Потомок.Отмечен И ЗначениеЗаполнено(Потомок.ИмяНабора) Тогда
			МассивОтмеченных.Добавить(Новый Структура("ИмяНабора, ИмяСвойства", Потомок.ИмяНабора, Потомок.ИмяСвойства));
		КонецЕсли;
		
		ПолучитьОтмеченные(Кэш, Потомок, МассивОтмеченных)
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьВсе(Кэш, ОтметитьВсе)
	
	Если Кэш.ПараметрыСистемы.Клиент.УправляемоеПриложение Тогда
		Родители = ДеревоНастроек.ПолучитьЭлементы();
	Иначе
		Родители = ДеревоНастроек.Строки;
	КонецЕсли;
	
	Для Каждого ТекРодитель Из Родители Цикл
		ПроставитьПометкиВниз(Кэш, ТекРодитель, ОтметитьВсе);
		ТекРодитель.Отмечен = ПолучитьОтмеченПоПотомкам(Кэш, ТекРодитель);
	КонецЦикла;
	
Конецпроцедуры

&НаКлиенте
Функция СоздатьСвойстваНаКлиенте(МассивОтмеченных, Отказ)
	
	фрм = МестныйКэш.ГлавноеОкно.СбисНайтиФормуФункции("СоздатьНаборСвойствПоМассиву", "Документ_Шаблон");
	Если фрм = Ложь Тогда
		Возврат Истина;
	КонецЕсли;
	
	Результат = фрм.СоздатьНаборСвойствПоМассиву(РассчитанныйНаборСвойств, МассивОтмеченных, ИниКонфигурация, Отказ);
	
	СформироватьДеревоНастроекНаСервере(РассчитанныйНаборСвойств, ИмяПланаВидовХарактеристикСвойствОбъектов);

	Если Отказ Тогда
		Возврат МестныйКэш.ОбщиеФункции.СбисИсключение(Результат, "ФормаНастройкаEDI.КомандаСоздатьСвойства");
	КонецЕсли;
	
КонецФункции
