Перем АдресаКонтр;
// функции для совместимости кода 
&НаКлиенте
Функция сбисПолучитьФорму(ИмяФормы)
	Если ТипЗнч(ЭтаФорма) = Тип("УправляемаяФорма") Тогда
		Попытка
			ЭтотОбъект="";
		Исключение
		КонецПопытки;
		Возврат ПолучитьФорму("ВнешняяОбработка.СБИС.Форма."+ИмяФормы);
	КонецЕсли;
	Возврат ЭтотОбъект.ПолучитьФорму(ИмяФормы);
КонецФункции
&НаКлиенте
Функция сбисЭлементФормы(Форма,ИмяЭлемента)
	Если ТипЗнч(ЭтаФорма) = Тип("УправляемаяФорма") Тогда
		Возврат Форма.Элементы.Найти(ИмяЭлемента);
	КонецЕсли;
	Возврат Форма.ЭлементыФормы.Найти(ИмяЭлемента);
КонецФункции
//------------------------------------------------------

&НаКлиенте
Процедура Показать(ДополнительныеПараметры) Экспорт
	КэшСовместимостьМетодов = ДополнительныеПараметры.КэшСовместимостьМетодов;
	КэшПарам = ДополнительныеПараметры.КэшПарам;
	РезервныйДомен = ДополнительныеПараметры.РезервныйДомен;
	АдресСервера = ДополнительныеПараметры.АдресСервера;
	ЭтаФорма.Открыть();
КонецПроцедуры
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ПодключитьОбработчикОжидания("СбисОжиданиеОбновитьТаблицуАдресов",0.1,Истина);
КонецПроцедуры
&НаКлиенте
Процедура ОтметитьВсе()
// отмечает все записи в таблице	
	Для Каждого Строка Из ТабАдрес Цикл
		Строка.Отмечен = ОтметитьВсе;
	КонецЦикла;
КонецПроцедуры
&НаКлиенте
Процедура КнопкаВыполнитьНажатие(Кнопка)
// Бежим по отмеченным и там где возможно, меняем адреса на КЛАДРовские
	СтрокаОтмечена = Ложь;
	
	ОтмеченныеСтроки = ТабАдрес.НайтиСтроки(Новый Структура("Отмечен", Истина));
	Если ОтмеченныеСтроки.Количество()>0 Тогда
		СтрокаОтмечена = Истина;
	КонецЕсли;
		
	Если СтрокаОтмечена = Ложь и ТабАдрес.Количество()<>0 Тогда
		Текст = "Необходимо отметить хотя бы одну строку!";
		Предупреждение(Текст);
	ИначеЕсли СтрокаОтмечена = Истина  Тогда
		Режим = РежимДиалогаВопрос.ДаНет;
		Текст = "ru = ""Исправить адреса контрагентов по формату КЛАДР?"";";
		Ответ = Вопрос(НСтр(Текст), Режим, 0);
		Если Ответ = КодВозвратаДиалога.ДА Тогда
			Попытка	
				СбисИзменитьАдресКонтрагента();
				СбисОбновитьТаблицуАдресов();
			Исключение
				Ошибка = ОписаниеОшибки();
				Сообщить(Ошибка);
			КонецПопытки;	
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура СбисИзменитьАдресКонтрагента()
// Заполняет структуру адреса и вызывает функцию, записывающую новый адрес в регистры или в табличную часть	
	Для Каждого Стр из ТабАдрес Цикл                                              
		Если Стр.Отмечен=ложь Тогда
			Продолжить;
		КонецЕсли;
		Если Стр.АдресКЛАДРСписок.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		АдресКЛАДР = Стр.АдресКЛАДРСписок[0].Значение;
		Если Стр.ВозможноНесколькоВариантов Тогда
			Продолжить;
		КонецЕсли;	
				
		СтруктураАдреса = Новый Структура;
		СтруктураАдреса.Вставить("Индекс","");
		СтруктураАдреса.Вставить("Регион","");
		СтруктураАдреса.Вставить("КодРегион","");
		СтруктураАдреса.Вставить("Район","");
		СтруктураАдреса.Вставить("Город","");
		СтруктураАдреса.Вставить("НаселПункт","");
		СтруктураАдреса.Вставить("Улица","");
		СтруктураАдреса.Вставить("Дом","");
		СтруктураАдреса.Вставить("Корпус","");
		СтруктураАдреса.Вставить("Квартира","");
		СтруктураАдреса.Вставить("Представление","");
		СтруктураАдреса.Вставить("ТипКорпуса","");
		СтруктураАдреса.Вставить("ТипКвартиры","");
		СтруктураАдреса.Вставить("ТипДома","");
		
		СтрутураТиповДомКорпусКвартира = СбисВернутьТипДомаКорпусаКвартиры(АдресКЛАДР);
        СтруктураАдреса.ТипКорпуса  = СтрутураТиповДомКорпусКвартира.ТипКорпуса;
		СтруктураАдреса.ТипКвартиры = СтрутураТиповДомКорпусКвартира.ТипКвартиры;
		СтруктураАдреса.ТипДома     = СтрутураТиповДомКорпусКвартира.Типдома;
		СтруктураАдреса.Дом         = СтрутураТиповДомКорпусКвартира.Дом;
		СтруктураАдреса.Корпус      = СтрутураТиповДомКорпусКвартира.Корпус;
		СтруктураАдреса.Квартира    = СтрутураТиповДомКорпусКвартира.Квартира;
		
		СтруктураАдреса.Индекс = ?(АдресКЛАДР.idx<>NULL,АдресКЛАДР.idx,"");
		
		Если АдресКЛАДР.objs.Количество()<>0 Тогда
			Для Ид=0 по АдресКЛАДР.objs.Количество()-1 Цикл
				Если      стрДлина(АдресКЛАДР.objs[ид].code) = 2 Тогда
					СтруктураАдреса.Регион   = АдресКЛАДР.objs[ид].name+ " "+АдресКЛАДР.objs[ид].abbr;
					СтруктураАдреса.КодРегион   = АдресКЛАДР.objs[ид].code;
				ИначеЕсли стрДлина(АдресКЛАДР.objs[ид].code) = 5 Тогда
					СтруктураАдреса.Район    = АдресКЛАДР.objs[ид].name+ " "+АдресКЛАДР.objs[ид].abbr;
				ИначеЕсли стрДлина(АдресКЛАДР.objs[ид].code) = 8 Тогда
					СтруктураАдреса.Город    = АдресКЛАДР.objs[ид].name+ " "+АдресКЛАДР.objs[ид].abbr;
				ИначеЕсли стрДлина(АдресКЛАДР.objs[ид].code) = 11 Тогда
					СтруктураАдреса.НаселПункт = АдресКЛАДР.objs[ид].name+ " "+АдресКЛАДР.objs[ид].abbr;
				ИначеЕсли стрДлина(АдресКЛАДР.objs[ид].code) = 15 Тогда
					СтруктураАдреса.Улица    = АдресКЛАДР.objs[ид].name + " "+АдресКЛАДР.objs[ид].abbr;
				КонецЕсли;	
			КонецЦикла;
		КонецЕсли;
		сбисЗаписатьИзменения(Стр, СтруктураАдреса);
		Стр.Отмечен=ложь;
	КонецЦикла;
КонецПроцедуры	
Процедура СбисОбновитьТаблицуАдресов()
// обновляет таблицу адресов	
	ТабАдрес.Очистить();
			
	Выборка = Справочники.Контрагенты.Выбрать();
	Пока Выборка.Следующий() Цикл
		СтруктураАдреса = Новый Структура;
		Ошибка = СбисВернутьТекстОшибкиПоАдресу(Выборка.Ссылка, СтруктураАдреса);
		Если Ошибка<>"" Тогда
			НоваяСтр = ТабАдрес.Добавить();
			новаяСтр.Контрагент = Выборка.Ссылка;
			новаяСтр.ТекАдрес = СбиСПолучитьПредставлениеАдрес(СтруктураАдреса);
			АдресКЛАДР =СбисСформироватьСтруктуруАдресаПоКЛАДР(новаяСтр.ТекАдрес);
			новаяСтр.АдресКЛАДРСписок.Добавить(АдресКЛАДР);
			новаяСтр.ВозможноНесколькоВариантов = СбисПроверитьКолВариантовАдреса(АдресКЛАДР);
			Если новаяСтр.ВозможноНесколькоВариантов Тогда
				НоваяСтр.АдресКЛАДР = "Возможно несколько вариантов адреса! Измените адрес вручную в карточке контрагента .";
			Иначе	
				НоваяСтр.АдресКладр = АдресКЛАДР.norm;
			КонецЕсли;
			новаяСтр.Ошибка = Ошибка;
		КонецЕсли;	
	КонецЦикла;
КонецПроцедуры
&НаКлиенте
Процедура СбисОжиданиеОбновитьТаблицуАдресов()
// Обновляет таблицу адресов после открытия формы	
	Попытка
		СбисОбновитьТаблицуАдресов();
	Исключение
		Ошибка = ОписаниеОшибки();
		Сообщить(Ошибка);
	КонецПопытки;		
КонецПроцедуры	
Функция СбисПроверитьКолВариантовАдреса(АдресКЛАДР)
// Проверяет возможность однозначно заполнить адрес по КЛАДР	
	ЕстьРегион   = Ложь;
	ЕстьГород    = Ложь;
	ЕстьНасПункт = Ложь;
	ЕстьУлица    = Ложь;
	
	Для Ид=0 по АдресКЛАДР.objs.Количество()-1 Цикл
		Если СтрДлина(АдресКЛАДР.objs[ид].Code)=15 Тогда
			ЕстьУлица    = Истина;
		ИначеЕсли СтрДлина(АдресКЛАДР.objs[ид].code)=11 Тогда
			ЕстьНасПункт = Истина;
		ИначеЕсли СтрДлина(АдресКЛАДР.objs[ид].code)=8 Тогда
			ЕстьГород    = Истина;						
		ИначеЕсли СтрДлина(АдресКЛАДР.objs[ид].code)=2 Тогда
			ЕстьРегион   = Истина;	
		КонецЕсли;	
	КонецЦикла;
	
	
	Если (НЕ ЕстьНасПункт и НЕ ЕстьУлица) или (НЕ ЕстьГород и НЕ ЕстьНасПункт) или НЕ ЕстьРегион Тогда
		Возврат	Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;	
КонецФункции	
Функция СбисВернутьТипДомаКорпусаКвартиры(АдресКЛАДР)
// формирует структуру с типами дома, корпуса, квартиры	
	СтруктураТипов= Новый Структура();
		Если АдресКЛАДР.hs<>NULL и Найти(АдресКЛАДР.hs,"к")>0 и Найти(АдресКЛАДР.hs,"влд")=0 Тогда  // дом и корпус 12к2
			Корпус = Сред(АдресКЛАДР.hs,Найти(АдресКЛАДР.hs,"к")+1);
			Дом    = Сред(АдресКЛАДР.hs,1,СтрДлина(АдресКЛАДР.hs)-СтрДлина(Корпус)-1);
			
		    СтруктураТипов.Вставить("Дом",Дом);
			СтруктураТипов.Вставить("Корпус",Корпус);
			СтруктураТипов.Вставить("ТипКорпуса","корпус");
			СтруктураТипов.Вставить("ТипДома","дом");
		ИначеЕсли АдресКЛАДР.hs<>NULL и Найти(АдресКЛАДР.hs,"влд")>0 и Найти(АдресКЛАДР.hs,"стр")>0 тогда //владение и строение (влд12стр32)
			темпСтр    = Сред(АдресКЛАДР.hs,Найти(АдресКЛАДР.hs,"влд")+3); //отсекаем префикс "влд"  = 12стр32
					
			Корпус = Сред(ТемпСтр,Найти(темпСтр,"стр")+3);
			Дом    = Сред(ТемпСтр,1,СтрДлина(ТемпСтр)-Стрдлина(Корпус)-3);
			
			СтруктураТипов.Вставить("Дом",Дом);
			СтруктураТипов.Вставить("Корпус",Корпус);
			СтруктураТипов.Вставить("ТипКорпуса","строение");
			СтруктураТипов.Вставить("ТипДома","владение");
		ИначеЕсли АдресКЛАДР.hs<>NULL и Найти(АдресКЛАДР.hs,"влд")>0 и Найти(АдресКЛАДР.hs,"к")>0 тогда //владение и корпус (влд2к13)
			темпСтр    = Сред(АдресКЛАДР.hs,Найти(АдресКЛАДР.hs,"влд")+3); // 2к13
			
			Корпус = Сред(темпСтр,найти(темпСтр,"к")+1);
			Дом    = Сред(ТемпСтр,1,СтрДлина(ТемпСтр)-Стрдлина(Корпус)-1);
			
			СтруктураТипов.Вставить("Дом",Дом);
			СтруктураТипов.Вставить("Корпус",Корпус);
			СтруктураТипов.Вставить("ТипКорпуса","корпус");
			СтруктураТипов.Вставить("ТипДома","владение");
		ИначеЕсли АдресКЛАДР.hs<>NULL и Найти(АдресКЛАДР.hs,"стр")>0 и Найти(АдресКЛАДР.hs,"влд")=0 Тогда //дом и строение   (12стр3)
			Корпус = Сред(АдресКЛАДР.hs,Найти(АдресКЛАДР.hs,"стр")+3);
			Дом    = Сред(АдресКЛАДР.hs,1,СтрДлина(АдресКЛАДР.hs)-Стрдлина(Корпус)-3);
			
			СтруктураТипов.Вставить("Дом",Дом);
			СтруктураТипов.Вставить("Корпус",Корпус);
			СтруктураТипов.Вставить("ТипДома","дом");
			СтруктураТипов.Вставить("ТипКорпуса","строение");
		ИначеЕсли АдресКЛАДР.hs<>NULL и Найти(АдресКЛАДР.hs,"стр")=0 и Найти(АдресКЛАДР.hs,"влд")=0 и Найти(АдресКЛАДР.hs,"к")=0 Тогда //дом   12
			СтруктураТипов.Вставить("Дом",АдресКЛАДР.hs);
			СтруктураТипов.Вставить("Корпус","");
			СтруктураТипов.Вставить("ТипКорпуса","корпус");
			СтруктураТипов.Вставить("ТипДома","дом");
		Иначе
			СтруктураТипов.Вставить("Дом","");
			СтруктураТипов.Вставить("Корпус","");
			СтруктураТипов.Вставить("ТипКорпуса","корпус");
			СтруктураТипов.Вставить("ТипДома","дом");
		КонецЕсли;

		Если АдресКЛАДР.fl<>NULL и Найти(АдресКЛАДР.fl,"кв.")>0 тогда
			Квартира = Сред(АдресКЛАДР.fl,Найти(АдресКЛАДР.fl,"кв.")+3);
			СтруктураТипов.Вставить("ТипКвартиры","кв.");
			СтруктураТипов.Вставить("Квартира",Квартира);
		ИначеЕсли АдресКЛАДР.fl<>NULL и Найти(АдресКЛАДР.fl,"оф.")>0 тогда
			Квартира = Сред(АдресКЛАДР.fl,Найти(АдресКЛАДР.fl,"оф.")+3);
			СтруктураТипов.Вставить("ТипКвартиры","оф.");
			СтруктураТипов.Вставить("Квартира",Квартира);
		Иначе
			СтруктураТипов.Вставить("ТипКвартиры","кв.");
			СтруктураТипов.Вставить("Квартира","");
		КонецЕсли;
		
Возврат СтруктураТипов;
КонецФункции	
	
Функция СбисВернутьТекстОшибкиПоАдресу(Контрагент, СтруктураАдреса)
// Формирует тип ошибки по адресу контрагента	
	СтруктураАдреса.Вставить("Индекс","");
	СтруктураАдреса.Вставить("КодРегион","");
	СтруктураАдреса.Вставить("Регион","");
	СтруктураАдреса.Вставить("Район","");
	СтруктураАдреса.Вставить("Город","");
	СтруктураАдреса.Вставить("НаселПункт","");
	СтруктураАдреса.Вставить("Улица","");
	СтруктураАдреса.Вставить("Дом","");
	СтруктураАдреса.Вставить("Корпус","");
	СтруктураАдреса.Вставить("Квартира","");
	СтруктураАдреса.Вставить("КодСтраны","");
	СтруктураАдреса.Вставить("Представление","");
	
	сбисЗаполнитьСтруктуруАдреса(Контрагент, СтруктураАдреса);
	
	Если СтруктураАдреса.КодРегион = "" и СтруктураАдреса.Регион <> "" Тогда
		СтруктураАдреса.КодРегион = ПолучитьКодРегионаПоНазванию(СтруктураАдреса.Регион);
	КонецЕсли;
	
	Если СтруктураАдреса.Индекс="" и СтруктураАдреса.КодРегион="" и СтруктураАдреса.Район="" и СтруктураАдреса.Город="" 
		и СтруктураАдреса.НаселПункт="" и СтруктураАдреса.Улица="" и СтруктураАдреса.Дом="" и СтруктураАдреса.Корпус="" и СтруктураАдреса.Квартира="" Тогда
		Возврат "Адрес заполнен произвольной строкой.";
	ИначеЕсли СтруктураАдреса.Улица="" и СтруктураАдреса.НаселПункт="" Тогда
		Возврат "Не заполнено одно из полей: ""Улица"" или ""Населенный пункт"".";
	ИначеЕсли СтруктураАдреса.Город="" и СтруктураАдреса.НаселПункт="" и (Найти(Нрег(СтруктураАдреса.Регион),"москва")=0) и (Найти(Нрег(СтруктураАдреса.Регион),"байконур")=0) И (Найти(Нрег(СтруктураАдреса.Регион),"санкт-петербург")=0) Тогда
		Возврат "Не заполнено одно из полей: ""Город"" или ""Населенный пункт"".";	
	Иначе
		Попытка
			Возврат ?(СтруктураАдреса.КодРегион<>"","","Не заполнено поле ""Регион"".");
		Исключение	
			Возврат "Не заполнено поле ""Регион"".";
		КонецПопытки;	
	КонецЕсли;
	Возврат "";
КонецФункции	
Функция ПолучитьКодРегионаПоНазванию(НазваниеРегиона) Экспорт
// получает код региона по названию	
	ИмяРегистра = ?(Метаданные.РегистрыСведений.Найти("АдресныеОбъекты") <> Неопределено, "АдресныеОбъекты", "АдресныйКлассификатор");
	ИмяУровня = ?(Метаданные.РегистрыСведений[ИмяРегистра].Измерения.Найти("ТипАдресногоЭлемента") <> Неопределено,"ТипАдресногоЭлемента",?(Метаданные.РегистрыСведений[ИмяРегистра].Реквизиты.Найти("ТипАдресногоЭлемента") <> Неопределено,"ТипАдресногоЭлемента","Уровень"));
	НазваниеКода = ?(Метаданные.РегистрыСведений[ИмяРегистра].Измерения.Найти("КодСубъектаРФ") <> Неопределено,"КодСубъектаРФ",?(Метаданные.РегистрыСведений[ИмяРегистра].Измерения.Найти("КодРегионаВКоде") <> Неопределено,"КодРегионаВКоде","КодАдресногоОбъектаВКоде"));
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	| АдресныйКлассификатор."+НазваниеКода+" КАК КодРегион
	|ИЗ
	| РегистрСведений."+ИмяРегистра+" КАК АдресныйКлассификатор
	|ГДЕ
	| АдресныйКлассификатор."+ИмяУровня+" = 1
	|И АдресныйКлассификатор.Наименование + "" "" + АдресныйКлассификатор.Сокращение = &НазваниеРегиона";
	Запрос.УстановитьПараметр("НазваниеРегиона", НазваниеРегиона);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		КодРегион = Выборка.КодРегион;
		Если Число(КодРегион)<10 Тогда
			КодРегион = "0"+Строка(КодРегион);
		КонецЕсли;
		Возврат КодРегион;
	КонецЦикла;
	
	Возврат "";
	
КонецФункции
Функция СбиСПолучитьПредставлениеАдрес(СтруктураАдреса)
// формирует текстовое представление адреса
	ТекПредставление = "";

	Если СокрЛП(СтруктураАдреса.Индекс) <> "" Тогда
		ТекПредставление = ТекПредставление + ", " + СокрЛП(СтруктураАдреса.Индекс);
	КонецЕсли;

	Если СокрЛП(СтруктураАдреса.Регион) <> "" Тогда
		ТекПредставление = ТекПредставление + ", " + СокрЛП(СтруктураАдреса.Регион);
	КонецЕсли;

	Если СокрЛП(СтруктураАдреса.Район) <> "" Тогда
		ТекПредставление = ТекПредставление + ", " + СокрЛП(СтруктураАдреса.Район);
	КонецЕсли;

	Если СокрЛП(СтруктураАдреса.Город) <> "" Тогда
		ТекПредставление = ТекПредставление + ", " + СокрЛП(СтруктураАдреса.Город);
	КонецЕсли;

	Если СокрЛП(СтруктураАдреса.НаселПункт) <> "" Тогда
		ТекПредставление = ТекПредставление + ", " + СокрЛП(СтруктураАдреса.НаселПункт);
	КонецЕсли;

	Если СокрЛП(СтруктураАдреса.Улица) <> "" Тогда
		ТекПредставление = ТекПредставление + ", " + СокрЛП(СтруктураАдреса.Улица);
	КонецЕсли;
	
	ТипДома = Неопределено;
	ТипКорпуса = Неопределено;
	ТипКвартиры = Неопределено;
	СтруктураАдреса.Свойство("ТипДома",     ТипДома);
	СтруктураАдреса.Свойство("ТипКорпуса",  ТипКорпуса);
	СтруктураАдреса.Свойство("ТипКвартиры", ТипКвартиры);

	
	Если СокрЛП(СтруктураАдреса.Дом) <> "" Тогда
		ТекПредставление = ТекПредставление + ", " + ?(ЗначениеЗаполнено(ТипДома), ТипДома, "дом") + " № " + СокрЛП(СтруктураАдреса.Дом);
	КонецЕсли;

	Если СокрЛП(СтруктураАдреса.Корпус) <> "" Тогда
		ТекПредставление = ТекПредставление + ", " + ?(ЗначениеЗаполнено(ТипКорпуса), ТипКорпуса, "корпус") + " " + СокрЛП(СтруктураАдреса.Корпус);
	КонецЕсли;

	Если СокрЛП(СтруктураАдреса.Квартира) <> "" Тогда
		ТекПредставление = ТекПредставление + ", " + ?(ЗначениеЗаполнено(ТипКвартиры), ТипКвартиры, "кв.") + СокрЛП(СтруктураАдреса.Квартира);
	КонецЕсли;

	Если СтрДлина(ТекПредставление) > 2 Тогда
		ТекПредставление = Сред(ТекПредставление, 3);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ТекПредставление) Тогда
		Возврат СтруктураАдреса.Представление;
	иначе	
		Возврат ТекПредставление;
	КонецЕсли;	

КонецФункции
//группа функций по работе с сервисом кладр
Функция СбисСформироватьСтруктуруАдресаПоКЛАДР(АдресСтрокой)
// Формирует структуру адреса, полученного с kladr.sbis.ru	
	ФайлСРезультатомКЛАДР = АдресПоКладрJSON(АдресСтрокой);
	Текст = Новый ЧтениеТекста(ФайлСРезультатомКЛАДР,КодировкаТекста.UTF8);
	СтрокаJSON = Текст.ПрочитатьСтроку();
	Текст.Закрыть();
	УдалитьФайлы(ФайлСРезультатомКЛАДР);
	МассивJSON = сбисПрочитатьJSON(СтрокаJSON);

	Возврат МассивJSON; 
КонецФункции	
Функция АдресПоКладрJSON(Адрес)
// Получает адрес с kladr.sbis.ru, записывает во временный файл	
	Результат = ПолучитьИмяВременногоФайла();
	Сервис="postal-service/service/code?addr="+Адрес;
	сбисСервер	= "online.sbis.ru";
	сбисПротокол= "https";
	Если РезервныйДомен Тогда
		сбисСервер = СтрЗаменить(сбисСервер, ".sbis.ru", ".saby.ru");
	КонецЕсли;
	сбисПрефикс	= СтрПолучитьСтроку(СтрЗаменить(Сред(АдресСервера, 9), "online", Символы.ПС), 1);
	Если Не Лев(сбисПрефикс, 2) = ".s" Тогда
		сбисСервер = сбисПрефикс + сбисСервер;
	КонецЕсли;
	сбисПрокси			= Новый ИнтернетПрокси;
	сбисПрокси.Пользователь	= КэшПарам.ПроксиЛогин;
	сбисПрокси.Пароль		= КэшПарам.ПроксиПароль;
	Если КэшПарам.ТипПрокси = "Вручную" Тогда
		Попытка
			сбисПорт = Число(КэшПарам.ПроксиПорт);
		Исключение
			Сообщить("Указан некорректный порт прокси-сервера");
			Возврат Ложь;
		КонецПопытки;
		Попытка
			сбисПрокси.Установить(сбисПротокол,КэшПарам.ПроксиСервер,сбисПорт,КэшПарам.ПроксиЛогин,КэшПарам.ПроксиПароль);
		Исключение
			сбисПрокси.Установить(сбисПротокол,КэшПарам.ПроксиСервер,сбисПорт);
		КонецПопытки;
	КонецЕсли;
	Если КэшСовместимостьМетодов.HTTPСоединение.OpenSSL Тогда
		СтрокаСоединения = "Новый HTTPСоединение(сбисСервер,,,,сбисПрокси,,Новый ЗащищенноеСоединениеOpenSSL())";
	Иначе
		СтрокаСоединения = "Новый HTTPСоединение(сбисСервер,,,,сбисПрокси,Истина)";
	КонецЕсли;
	сбисСоединение = Вычислить(СтрокаСоединения);
	сбисСоединение.Получить(Сервис, Результат); 
	сбисСоединение = Неопределено;
	Возврат Результат;
КонецФункции
 

// JSON парсер.   ----------------------------------------------------------------------------
//
// Параметры:
//	Значение - Строка. Строка данных в формате JSON для парсинга;
//
//  Стандарт - Неопределено, Булево. Режим работы:
//		- Истина - стандартный режим (значение по умолчанию);
//		- Ложь - альтернативный режим;
//		- Неопределено - автоопределение режима;
//
//  ПредставленияСсылок - Неопределено, Булево. Режим передачи ссылочных типов, с их представлением или без:
//		- Истина - ссылки передаются вместе со своим представлением, как объекты с двумя свойствами содержащими саму ссылку и ее представление;
//		- Ложь - ссылки передаются без представления (значение по умолчанию).
//		- Неопределено - автоопределение режима.
// 
// Возвращаемое значение:
//  Набор данных согласно содержимому входящих данных. 
//
Функция сбисПрочитатьJSON(Значение, Стандарт = Истина, ПредставленияСсылок = Ложь) 
	
	Возврат jsonПрочитатьИнициализация(Значение, Стандарт, ПредставленияСсылок);
	
КонецФункции // сбисПрочитатьJSON()

// ─────────────────────────────────────────────────────────────────────────────
//  НАСТРОЙКИ

// Функция управляющая настройкой "АвтоматическоеПриведениеОбъектаКСтруктуре".
//
// Возвращаемое значение:
//  Булево. Значение настройки:
//		- Истина - выполняется автоматическое приведение объекта к структуре; 
//		- Ложь - автоматическое приведение объекта к структуре не выполняется, все объекты преобразуются в соответствие. 
//
// Примечание:
//  Автоматическое приведение к структуре выполняется только для объектов имена свойств которых могут быть 
//  использованы как ключи структуры, все остальные объекты преобразуются в соответствие.
//
Функция НастройкаАвтоматическоеПриведениеОбъектаКСтруктуре()
	
	Возврат Истина; // Измените для использования автоматического приведения объекта к структуре.
	
КонецФункции // НастройкаАвтоматическоеПриведениеОбъектаКСтруктуре()
// Функция управляющая настройкой "ПолноеМаскированиеСимволов".
//
// Возвращаемое значение:
//  Булево. Значение настройки:
//		- Истина - выполняется полное маскирование символов некорректно обрабатываемых JavaScript-ом; 
//		- Ложь - маскирование выполняется только согласно стандарту и дополнительно маскируются специальные символы. 
//
// Примечание:
//	Маскирование специальных символов из диапазона [0x0000, 0x001f] выполняется в не зависимости от настройки.
//
Функция НастройкаПолноеМаскированиеСимволов()
	
	Возврат Истина;	// Измените для неполного маскирования символов.
	
КонецФункции // НастройкаПолноеМаскированиеСимволов()
// Функция управляющая настройкой "НеявноеПриведениеПримитивныхЗначенийКлюча".
//
// Возвращаемое значение:
//  Булево. Значение настройки:
//		- Истина - выполняется неявное приведение примитивных типов значений ключей соответствий к их строковому представлению в формате 1С; 
//		- Ложь - неявное приведение примитивных типов значений ключей соответствий к строковому представлению не выполняется. 
//
// Примечание:
//	Неявно приводимые типы: Null, Булево, Число, Дата, Строка, УникальныйИдентификатор.
//
Функция НастройкаНеявноеПриведениеПримитивныхЗначенийКлюча()
	
	Возврат Ложь;	// Измените для использования неявного приведения примитивных значений ключей соответствий к строке.
	
КонецФункции // НастройкаНеявноеПриведениеПримитивныхЗначенийКлюча()


// ─────────────────────────────────────────────────────────────────────────────
//  ПАРСЕР

Функция jsonПрочитатьИнициализация(Значение, Стандарт, ПредставленияСсылок)
	
	// Проверка параметров.
	Если (Не Стандарт = Истина) И (Не Стандарт = Ложь) И (Не Стандарт = Неопределено) Тогда ВызватьИсключение ИсключениеНекорректныйПараметр("Стандарт"); КонецЕсли; 
	Если (Не ПредставленияСсылок = Истина) И (Не ПредставленияСсылок = Ложь) И (Не ПредставленияСсылок = Неопределено) Тогда ВызватьИсключение ИсключениеНекорректныйПараметр("ПредставленияСсылок"); КонецЕсли; 
	
	// Схема подстановок шестнадцатиричной системы.
	СхемаПодстановок = Новый Соответствие; ШестнадцатиричнаяСистема = "0123456789abcdef"; ДесятичноеЧисло = 0;
	Для ВторойРазряд = 1 По 16 Цикл Для ПервыйРазряд = 1 По 16 Цикл СхемаПодстановок.Вставить(Сред(ШестнадцатиричнаяСистема, ВторойРазряд, 1) + Сред(ШестнадцатиричнаяСистема, ПервыйРазряд, 1), ДесятичноеЧисло); ДесятичноеЧисло = ДесятичноеЧисло + 1; КонецЦикла; КонецЦикла;
	
	// Вспомогательные данные.
	ВспомогательныеДанные = Новый Структура("ТипСтроки,СхемаПодстановок,АвтоматическиПриводитьКСтруктуре",
		Тип("Строка"),
		СхемаПодстановок,
		(НастройкаАвтоматическоеПриведениеОбъектаКСтруктуре() = Истина));
		
	// Стартовые значения.
	Индекс = 1; Длина = СтрДлина(Значение);
	
	// Форматирование (первый шаг парсера).
	Если (Стандарт = Истина) Или (Стандарт = Неопределено) Тогда СимволыФорматирования = " " + Символы.ВК + Символы.ПС + Символы.Таб; jsonПрочитатьПропуститьФорматирование(Значение, Стандарт, Индекс, Длина, СимволыФорматирования); Иначе СимволыФорматирования = ""; КонецЕсли;
	Если (Индекс > Длина) Тогда ВызватьИсключение ИсключениеПустойПакетДанных(); КонецЕсли; 
	
	// Парсер.
	Возврат jsonПрочитать(Значение, Стандарт, ПредставленияСсылок, Индекс, Длина, ВспомогательныеДанные, СимволыФорматирования, Истина);
	
КонецФункции // jsonПрочитатьИнициализация()
Функция jsonПрочитать(Значение, Стандарт, ПредставленияСсылок, Индекс, Длина, ВспомогательныеДанные, СимволыФорматирования, ПервыйУровень)
	
	Символ = Сред(Значение, Индекс, 1);
	Если (Символ = "[") Тогда																								// [
		
		// Массив.
		Результат = Новый Массив;
		
		Индекс = Индекс + 1; jsonПрочитатьПропуститьФорматирование(Значение, Стандарт, Индекс, Длина, СимволыФорматирования); Если (Индекс > Длина) Тогда ВызватьИсключение ИсключениеНеожиданноеОкончаниеМассива(Длина); КонецЕсли;
		Символ = Сред(Значение, Индекс, 1); Если (Символ = "]") Тогда														// ] 
			
			// Пустой массив.
			Индекс = Индекс + 1;
		
		Иначе
		
			Пока (Индекс <= Длина) Цикл
				
				// Значение.
				Результат.Добавить(jsonПрочитать(Значение, Стандарт, ПредставленияСсылок, Индекс, Длина, ВспомогательныеДанные, СимволыФорматирования, Ложь));
				
				Символ = Сред(Значение, Индекс, 1);
				Если (Символ = "]") Тогда																					// ]
					// Окончание массива.
					Индекс = Индекс + 1; Прервать;
				Иначе
					// Продолжение массива.
					Если (Символ = ",") Тогда																				// ,
						Индекс = Индекс + 1; jsonПрочитатьПропуститьФорматирование(Значение, Стандарт, Индекс, Длина, СимволыФорматирования); Если (Индекс >= Длина) Тогда ВызватьИсключение ИсключениеНеожиданноеОкончаниеМассива(Длина); КонецЕсли;
					Иначе
						ВызватьИсключение ИсключениеНедопустимыйСимвол(Индекс, ",");
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	ИначеЕсли (Символ = "{") Тогда																							// {
	
		// Объект.
		
		Индекс = Индекс + 1; jsonПрочитатьПропуститьФорматирование(Значение, Стандарт, Индекс, Длина, СимволыФорматирования); Если (Индекс > Длина) Тогда ВызватьИсключение ИсключениеНеожиданноеОкончаниеМассива(Длина); КонецЕсли;
		Символ = Сред(Значение, Индекс, 1); Если (Символ = "}") Тогда														// } 
			
			// Пустой объект.
			Индекс = Индекс + 1;
			
			ТолькоДопустимыеСтроки = ВспомогательныеДанные.АвтоматическиПриводитьКСтруктуре; Если ТолькоДопустимыеСтроки Тогда РезультатСтруктура = Новый Структура; Иначе РезультатСоответствие = Новый Соответствие; КонецЕсли;
		
		Иначе
			
			ТолькоДопустимыеСтроки = ВспомогательныеДанные.АвтоматическиПриводитьКСтруктуре; РезультатСоответствие = Новый Соответствие; Если ТолькоДопустимыеСтроки Тогда РезультатСтруктура = Новый Структура; КонецЕсли; ТипСтроки = ВспомогательныеДанные.ТипСтроки;
			
			Пока (Индекс <= Длина) Цикл
				
				// Ключ.
				Начало = Индекс; КлючЭлемента = jsonПрочитать(Значение, Стандарт, ПредставленияСсылок, Индекс, Длина, ВспомогательныеДанные, СимволыФорматирования, Ложь); Если (Не ТипЗнч(КлючЭлемента) = ТипСтроки) Тогда ВызватьИсключение ИсключениеНедопустимыйТипКлюча(Начало, КлючЭлемента); КонецЕсли;
				
				Символ = Сред(Значение, Индекс, 1);
				Если (Символ = ":") Тогда																					// :
					Индекс = Индекс + 1; jsonПрочитатьПропуститьФорматирование(Значение, Стандарт, Индекс, Длина, СимволыФорматирования); Если (Индекс >= Длина) Тогда ВызватьИсключение ИсключениеНеожиданноеОкончаниеОбъетка(Длина); КонецЕсли;
				Иначе
					ВызватьИсключение ИсключениеНедопустимыйСимвол(Индекс, ":");
				КонецЕсли;
				
				// Значение.
				ЗначениеЭлемента = jsonПрочитать(Значение, Стандарт, ПредставленияСсылок, Индекс, Длина, ВспомогательныеДанные, СимволыФорматирования, Ложь);
				
				// Коллекция.
				РезультатСоответствие.Вставить(КлючЭлемента, ЗначениеЭлемента);
				Если ТолькоДопустимыеСтроки Тогда Попытка РезультатСтруктура.Вставить(КлючЭлемента, ЗначениеЭлемента); Исключение ТолькоДопустимыеСтроки = Ложь; КонецПопытки; КонецЕсли;
				
				Символ = Сред(Значение, Индекс, 1);
				Если (Символ = "}") Тогда																					// }
					// Окончание объекта.
					Индекс = Индекс + 1; Прервать;
				Иначе
					// Продолжение объекта.
					Если (Символ = ",") Тогда																				// ,
						Индекс = Индекс + 1; jsonПрочитатьПропуститьФорматирование(Значение, Стандарт, Индекс, Длина, СимволыФорматирования); Если (Индекс >= Длина) Тогда ВызватьИсключение ИсключениеНеожиданноеОкончаниеОбъетка(Длина); КонецЕсли;
					Иначе
						ВызватьИсключение ИсключениеНедопустимыйСимвол(Индекс, ",");
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;	
		
		КонецЕсли;
		
		// Структуры.
		Если ТолькоДопустимыеСтроки Тогда   
			Результат = РезультатСтруктура; 
		Иначе
			Результат = РезультатСоответствие;
		КонецЕсли;
		
		// Ссылка.
		Если (ПредставленияСсылок = Истина) Или (ПредставленияСсылок = Неопределено) Тогда Результат = jsonПрочитатьСсылку(Результат, ТолькоДопустимыеСтроки); КонецЕсли;
		
	Иначе
	
		// Примитивные типы.
		Если (Символ = """") Или (Символ = "'") Тогда        																// " , '
			
			// Строка.
			Подстрока = Сред(Значение, Индекс + 1); Начало = Индекс; Пока Истина Цикл
				Позиция = Найти(Подстрока, Символ);
				
				Если (Позиция > 0) Тогда
					Индекс = Индекс + Позиция; Откат = Позиция - 1; Маскировка = Ложь; Пока (Сред(Подстрока, Откат, 1) = "\") И Булево(Откат) Цикл Маскировка = Не Маскировка; Откат = Откат - 1; КонецЦикла;
					Если Маскировка Тогда Подстрока = Сред(Подстрока, Позиция + 1); Иначе Прервать; КонецЕсли;
				Иначе
			  		ВызватьИсключение ИсключениеНеожиданноеОкончаниеПакетаДанных();
				КонецЕсли;
				
			КонецЦикла;
			
			// Строка.
			Результат = jsonПрочитатьСтроку(Сред(Значение, Начало + 1, Индекс - Начало - 1), Стандарт, Начало, ВспомогательныеДанные.СхемаПодстановок, (Символ = "'"));
			
			Если jsonПрочитатьОпределитьДату(Результат) Тогда
				// Дата.
				Результат = jsonПрочитатьДату(Результат, Начало);
			ИначеЕсли jsonПрочитатьОпределитьИдентификатор(Результат) Тогда
				// Идентификатор.
				Результат = jsonПрочитатьИдентификатор(Результат, Начало);
			ИначеЕсли (Стандарт = Ложь) Или (Стандарт = Неопределено) Тогда
				Если jsonПрочитатьОпределитьВнутреннийТип(Результат) Тогда
					// Внутренний тип.
					Результат = jsonПрочитатьВнутреннийТип(Результат, Начало);
				КонецЕсли;
			КонецЕсли;
			
			// Корректировка индекса.
			Индекс = Индекс + 1;
			
		Иначе
			
			Если (Символ = "n") Тогда
				
				// Null.
				Если (Сред(Значение, Индекс, 4) = "null") Тогда Индекс = Индекс + 4; Результат = Null; Иначе ВызватьИсключение ИсключениеНекорректныйТипNull(Индекс); КонецЕсли;
				
			ИначеЕсли (Символ = "t") Тогда
				
				// Истина.
				Если (Сред(Значение, Индекс, 4) = "true") Тогда Индекс = Индекс + 4; Результат = Истина; Иначе ВызватьИсключение ИсключениеНекорректныйТипБулево(Индекс); КонецЕсли;
				
			ИначеЕсли (Символ = "f") Тогда
				
				// Ложь.
				Если (Сред(Значение, Индекс, 5) = "false") Тогда Индекс = Индекс + 5; Результат = Ложь; Иначе ВызватьИсключение ИсключениеНекорректныйТипБулево(Индекс); КонецЕсли;
				
			ИначеЕсли (Символ = "u") Тогда
				
				// Неопределено.
				Если (Сред(Значение, Индекс, 9) = "undefined") Тогда Индекс = Индекс + 9; Результат = Неопределено; Иначе ВызватьИсключение ИсключениеНекорректныйТипНеопределено(Индекс); КонецЕсли;
				
			Иначе
				
				// Число.
				Начало = Индекс; Пока Булево(Найти("-+0123456789.", Символ)) И (Индекс <= Длина) Цикл Индекс = Индекс + 1; Символ = Сред(Значение, Индекс, 1); КонецЦикла;
				
				// Преобразование числа.
				Попытка
					Результат = Число(Сред(Значение, Начало, Индекс - Начало));
				Исключение
					ВызватьИсключение ИсключениеНекорректныйФорматЧисла(Начало, Сред(Значение, Начало, Индекс - Начало)); 
				КонецПопытки;
				
				// Экспоненциальная часть.
				Если (Символ = "E") Или (Символ = "e") Тогда
					
					// Степень.
					Индекс = Индекс + 1; Позиция = Индекс; Символ = Сред(Значение, Индекс, 1); Пока Булево(Найти("-+0123456789", Символ)) И (Индекс <= Длина) Цикл Индекс = Индекс + 1; Символ = Сред(Значение, Индекс, 1); КонецЦикла;
					
					// Преобразование степени.
					Попытка
						Степень = Число(Сред(Значение, Позиция, Индекс - Позиция));
					Исключение
						ВызватьИсключение ИсключениеНекорректныйФорматЧисла(Начало, Сред(Значение, Начало, Индекс - Начало)); 
					КонецПопытки;
					
					// Возвидение числа в степень.
					Результат = Результат * Pow(10, Степень);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Форматирование.
	jsonПрочитатьПропуститьФорматирование(Значение, Стандарт, Индекс, Длина, СимволыФорматирования); Если ПервыйУровень Тогда Если (Индекс <= Длина) Тогда ВызватьИсключение ИсключениеНекорректныйПакетДанных(Индекс); КонецЕсли; Иначе Если (Индекс > Длина) Тогда ВызватьИсключение ИсключениеНеожиданноеОкончаниеПакетаДанных(); КонецЕсли; КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // jsonПрочитать()
Функция jsonПрочитатьОпределитьДату(Значение)

	// Проверка.
	Если (СтрДлина(Значение) = 20) Тогда
		Если (Сред(Значение, 05, 1) = "-") И				// -
			 (Сред(Значение, 08, 1) = "-") И				// -
			 (Сред(Значение, 11, 1) = "T") И				// T
			 (Сред(Значение, 14, 1) = ":") И				// :
			 (Сред(Значение, 17, 1) = ":") И				// :
			 (Сред(Значение, 20, 1) = "Z") Тогда			// Z
			// Год. 
			Если Булево(Найти("0123456789", Сред(Значение, 01, 1))) И
				 Булево(Найти("0123456789", Сред(Значение, 02, 1))) И
				 Булево(Найти("0123456789", Сред(Значение, 03, 1))) И
				 Булево(Найти("0123456789", Сред(Значение, 04, 1))) И
			// Месяц.
				 Булево(Найти("0123456789", Сред(Значение, 06, 1))) И
				 Булево(Найти("0123456789", Сред(Значение, 07, 1))) И
			// День.
				 Булево(Найти("0123456789", Сред(Значение, 09, 1))) И
				 Булево(Найти("0123456789", Сред(Значение, 10, 1))) И
			// Час.
				 Булево(Найти("0123456789", Сред(Значение, 12, 1))) И
				 Булево(Найти("0123456789", Сред(Значение, 13, 1))) И
			// Минута.
				 Булево(Найти("0123456789", Сред(Значение, 15, 1))) И
				 Булево(Найти("0123456789", Сред(Значение, 16, 1))) И
			// Секунда.
				 Булево(Найти("0123456789", Сред(Значение, 18, 1))) И
				 Булево(Найти("0123456789", Сред(Значение, 19, 1))) Тогда
				Возврат Истина; 
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции // jsonПрочитатьОпределитьДату()
Функция jsonПрочитатьОпределитьИдентификатор(Значение)

	// Проверка.
	Если (СтрДлина(Значение) = 36) Тогда
		Если (Сред(Значение, 09, 1) = "-") И					// -
			 (Сред(Значение, 14, 1) = "-") И					// -
			 (Сред(Значение, 19, 1) = "-") И					// -
			 (Сред(Значение, 24, 1) = "-") Тогда				// -
			// Первая часть. 
			Для Индекс = 01 По 08 Цикл Если Не Булево(Найти("0123456789ABCDEFabcdef", Сред(Значение, Индекс, 1))) Тогда Возврат Ложь; КонецЕсли; КонецЦикла;
			// Вторая часть. 
			Для Индекс = 10 По 13 Цикл Если Не Булево(Найти("0123456789ABCDEFabcdef", Сред(Значение, Индекс, 1))) Тогда Возврат Ложь; КонецЕсли; КонецЦикла;
			// Третья часть. 
			Для Индекс = 15 По 18 Цикл Если Не Булево(Найти("0123456789ABCDEFabcdef", Сред(Значение, Индекс, 1))) Тогда Возврат Ложь; КонецЕсли; КонецЦикла;
			// Четвертая часть. 
			Для Индекс = 20 По 23 Цикл Если Не Булево(Найти("0123456789ABCDEFabcdef", Сред(Значение, Индекс, 1))) Тогда Возврат Ложь; КонецЕсли; КонецЦикла;
			// Пятая часть. 
			Для Индекс = 25 По 36 Цикл Если Не Булево(Найти("0123456789ABCDEFabcdef", Сред(Значение, Индекс, 1))) Тогда Возврат Ложь; КонецЕсли; КонецЦикла;
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции // jsonПрочитатьОпределитьИдентификатор()
Функция jsonПрочитатьОпределитьВнутреннийТип(Значение)
	
	// Поиск.
	Возврат (Лев(Значение, 1) = "¦") И (Сред(Значение, 5, 1) = "¦") И (Прав(Значение, 1) = "¦"); // ¦xxx¦ ... ¦
	
КонецФункции // jsonПрочитатьОпределитьВнутреннийТип()
Функция jsonПрочитатьСтроку(Значение, Стандарт, Индекс, СхемаПодстановок, ОдинарнаяКавычка)
	
	// Последоавтельность перемаскировки.
	ПоследоавтельностьПеремаскировки = "\" + Символ(65535);
	
	// Демаскирование служебных символов.
	Результат = СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(Значение, 
						"\\",			ПоследоавтельностьПеремаскировки),		// Перемаскирование последовательности.
						"\/",			"/"),           // x2f
						"\b",			Символ(008)),	// x08
						"\t",			Символы.Таб),   // x09
						"\n",			Символы.ПС),    // x0a
						"\f",			Символы.ПФ),    // x0c
						"\r",			Символы.ВК),    // x0d
						"\""",			"""");          // x22
						
	// Демаскирование Юникод символов.
	Позиция = Найти(Результат, "\u"); Пока Булево(Позиция) Цикл
		СтаршийБайт = СхемаПодстановок[НРег(Сред(Результат, Позиция + 2, 2))]; МладшийБайт = СхемаПодстановок[НРег(Сред(Результат, Позиция + 4, 2))]; Если (СтаршийБайт = Неопределено) Или (МладшийБайт = Неопределено) Тогда ВызватьИсключение ИсключениеНекорректныйФорматСтроки(Индекс); КонецЕсли;
		Результат = СтрЗаменить(Результат, Сред(Результат, Позиция, 6), Символ(256 * СтаршийБайт + МладшийБайт)); Позиция = Найти(Результат, "\u");
	КонецЦикла;
		
	// Одинарная кавычка.
	Если ОдинарнаяКавычка Тогда Результат = СтрЗаменить(Результат, "\'", "'"); КонецЕсли;
	
	// Демаскирование перемаскированой последовательности.
	Возврат СтрЗаменить(Результат, ПоследоавтельностьПеремаскировки, "\");				
						
КонецФункции // jsonПрочитатьСтроку()
Функция jsonПрочитатьДату(Значение, Индекс)
	
	// Поиск.
	Попытка
		Возврат Дата(Лев(Значение, 4) + Сред(Значение, 06, 2) + Сред(Значение, 09, 2) + 
					 Сред(Значение, 12, 2) + Сред(Значение, 15, 2) + Сред(Значение, 18, 2));
	Исключение
		ВызватьИсключение ИсключениеНекорректныйФорматДаты(Индекс, Значение);
	КонецПопытки;
	
КонецФункции // jsonПрочитатьДату()
Функция jsonПрочитатьСсылку(Значение, Структура)
	
	Перем Ссылка;
	
	// Ссылка.
	Если (Значение.Количество() = 2) Тогда 
		Если Структура Тогда
			Если Значение.Свойство("Представление") И Значение.Свойство("Ссылка", Ссылка) Тогда Возврат Ссылка; КонецЕсли;
		Иначе
			Ссылка = Значение.Получить("Ссылка"); Если (Не Ссылка = Неопределено) И (Не Значение.Получить("Представление") = Неопределено) Тогда Возврат Ссылка; КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
	
	Возврат Значение;
	
КонецФункции // jsonПрочитатьСсылку()
Функция jsonПрочитатьИдентификатор(Значение, Индекс)
	
	// Поиск.
	Попытка
		Возврат Новый УникальныйИдентификатор(Значение);
	Исключение
		ВызватьИсключение ИсключениеНевозможноПреобразоватьЗначение(Индекс, Значение);
	КонецПопытки;
	
КонецФункции // jsonПрочитатьИдентификатор()
Функция jsonПрочитатьВнутреннийТип(Значение, Индекс)
#Если ВебКлиент Или ТонкийКлиент Тогда
	ВызватьИсключение ИсключениеНевозможноПреобразоватьЗначениеНаКлиенте(Индекс, Значение);
#Иначе
	
	// Поиск.
	Тип = Сред(Значение, 2, 3); Данные = Сред(Значение, 6, СтрДлина(Значение) - 6);
	
	Если (Тип = "ref") Тогда
		Попытка
			Возврат ЗначениеИзСтрокиВнутр("{""#""," + СтрЗаменить(СтрЗаменить(Данные, "×", ":"), "÷", ",") + "}");
		Исключение
			ВызватьИсключение ИсключениеНевозможноПреобразоватьЗначение(Индекс, Значение);
		КонецПопытки;
	КонецЕсли;
		
	ВызватьИсключение ИсключениеНеопознанныйТип(Индекс, Тип);
	
#КонецЕсли
КонецФункции // jsonПрочитатьВнутреннийТип()
Процедура jsonПрочитатьПропуститьФорматирование(Значение, Стандарт, Индекс, Длина, СимволыФорматирования)
	
	// Пропуск форматирования.
	Если (Стандарт = Истина) Или (Стандарт = Неопределено) Тогда Пока (Индекс <= Длина) И Булево(Найти(СимволыФорматирования, Сред(Значение, Индекс, 1))) Цикл Индекс = Индекс + 1; КонецЦикла; КонецЕсли;
	// Пробел его не видно, \r, \n, \t .
	
КонецПроцедуры // jsonПрочитатьПропуститьФорматирование()

// ─────────────────────────────────────────────────────────────────────────────
//  ЛОКАЛИЗАЦИЯ

Функция сбисШаблон(Строка, Параметры) Экспорт
	
	Результат = Строка;
		
	Для Каждого Параметр Из Параметры Цикл
		Результат = СтрЗаменить(Результат, "[" + Параметр.Ключ + "]", Строка(Параметр.Значение));
	КонецЦикла;

	Возврат Результат;
	
КонецФункции // сбисШаблон()
Функция ИсключениеПустойПакетДанных() Экспорт 
	
	Возврат НСтр("ru = 'JSON: Пустой пакет данных.'; uk = 'JSON: Порожній пакет даних.'");

КонецФункции // ИсключениеНеожиданноеОкончаниеСтроки()
Функция ИсключениеНекорректныйПакетДанных(Индекс) Экспорт 
	
	Возврат сбисШаблон(НСтр("ru = 'JSON: Некорректный пакет данных в позиции [Индекс].'; uk = 'JSON: Некоректний пакет даних у позиції [Индекс].'"),
				   Новый Структура("Индекс", Индекс));

КонецФункции // ИсключениеНекорректныйПакетДанных()
Функция ИсключениеНеожиданноеОкончаниеПакетаДанных() Экспорт 
	
	Возврат НСтр("ru = 'JSON: Неожиданное окончание пакета данных.'; uk = 'JSON: Несподіване закінчення пакета даних.'");

КонецФункции // ИсключениеНеожиданноеОкончаниеПакетаДанных()
Функция ИсключениеНеожиданноеОкончаниеМассива(Индекс) Экспорт 
	
	Возврат сбисШаблон(НСтр("ru = 'JSON: Неожиданное окончание массива в позиции [Индекс].'; uk = 'JSON: Несподіване закінчення масиву у позиції [Индекс].'"),
				   Новый Структура("Индекс", Индекс));

КонецФункции // ИсключениеНеожиданноеОкончаниеМассива()
Функция ИсключениеНеожиданноеОкончаниеОбъетка(Индекс) Экспорт 

	Возврат сбисШаблон(НСтр("ru = 'JSON: Неожиданное окончание объекта в позиции [Индекс].'; uk = 'JSON: Несподіване закінчення об''єкту у позиції [Индекс].'"),
				   Новый Структура("Индекс", Индекс));

КонецФункции // ИсключениеНеожиданноеОкончаниеОбъетка()
Функция ИсключениеНекорректныйТипNull(Индекс) Экспорт 
	
	Возврат сбисШаблон(НСтр("ru = 'JSON: Некорректный тип Null в позиции [Индекс].'; uk = 'JSON: Некоректний тип Null у позиції [Индекс].'"),
				   Новый Структура("Индекс", Индекс));

КонецФункции // ИсключениеНекорректныйТипNull()
Функция ИсключениеНекорректныйТипБулево(Индекс) Экспорт 
	
	Возврат сбисШаблон(НСтр("ru = 'JSON: Некорректный тип Булево в позиции [Индекс].'; uk = 'JSON: Некоректний тип Булево у позиції [Индекс].'"),
				   Новый Структура("Индекс", Индекс));

КонецФункции // ИсключениеНекорректныйТипБулево()
Функция ИсключениеНекорректныйТипНеопределено(Индекс) Экспорт 
	
	Возврат сбисШаблон(НСтр("ru = 'JSON: Некорректный тип Неопределено в позиции [Индекс].'; uk = 'JSON: Некоректний тип Невизначено у позиції [Индекс].'"),
				   Новый Структура("Индекс", Индекс));

КонецФункции // ИсключениеНекорректныйТипНеопределено()
Функция ИсключениеНекорректныйФорматСтроки(Индекс) Экспорт 
	
	Возврат сбисШаблон(НСтр("ru = 'JSON: Некорректный формат строки в позиции [Индекс].'; uk = 'JSON: Некоректний формат рядка у позиції [Индекс].'"),
				   Новый Структура("Индекс", Индекс));

КонецФункции // ИсключениеНекорректныйФорматСтроки()
Функция ИсключениеНекорректныйФорматДаты(Индекс, Значение) Экспорт 
	
	Возврат сбисШаблон(НСтр("ru = 'JSON: Некорректный формат даты [Значение] в позиции [Индекс].'; uk = 'JSON: Некоректний формат дати [Значение] у позиції [Индекс].'"),
				   Новый Структура("Индекс", Индекс, Символ(034) + Значение + Символ(034)));

КонецФункции // ИсключениеНекорректныйФорматДаты()
Функция ИсключениеНекорректныйФорматЧисла(Индекс, Значение) Экспорт 
	
	Если ПустаяСтрока(Значение) Тогда
		
		Возврат сбисШаблон(НСтр("ru = 'JSON: Неверный формат данных в позиции [Индекс].'; uk = 'JSON: Невірний формат даних у позиції [Индекс].'"),
					   Новый Структура("Индекс", Индекс));

	Иначе
		
		Возврат сбисШаблон(НСтр("ru = 'JSON: Некорректный формат числа [Значение] в позиции [Индекс].'; uk = 'JSON: Некоректний формат числа [Значение] у позиції [Индекс].'"),
					   Новый Структура("Индекс,Значение", Индекс, Символ(034) + Значение + Символ(034)));
					   
	КонецЕсли;
					   
КонецФункции // ИсключениеНекорректныйФорматЧисла()
Функция ИсключениеНедопустимыйСимвол(Индекс, Символ) Экспорт 
	
	Если (Символ = Неопределено) Тогда
		
		Возврат сбисШаблон(НСтр("ru = 'JSON: Недопустимый символ в позиции [Индекс].'; uk = 'JSON: Неприпустимий символ в позиції [Индекс].'"),
					   Новый Структура("Индекс", Индекс));

	Иначе
		
		Возврат сбисШаблон(НСтр("ru = 'JSON: Недопустимый символ в позиции [Индекс], ожидается [Символ].'; uk = 'JSON: Неприпустимий символ в позиції [Индекс], очікується [Символ].'"),
					   Новый Структура("Индекс,Символ", Индекс, Символ(034) + Символ + Символ(034)));

	КонецЕсли;
				   
КонецФункции // ИсключениеНедопустимыйСимвол()
Функция ИсключениеНеопознанныйТип(Индекс, Тип) Экспорт 
	
	Возврат сбисШаблон(НСтр("ru = 'JSON: Недопустимый тип [Тип] в позиции [Индекс].'; uk = 'JSON: Неприпустимий тип [Тип] у позиції [Индекс].'"),
				   Новый Структура("Индекс,Тип", Индекс, Символ(034) + Тип + Символ(034)));

КонецФункции // ИсключениеНеопознанныйТип()
Функция ИсключениеНевозможноПреобразоватьЗначение(Индекс, Значение) Экспорт 
	
	Возврат сбисШаблон(НСтр("ru = 'JSON: Невозможно преобразовать значение [Значение] в позиции [Индекс].'; uk = 'JSON: Неможливо перетворити значення [Значение] у позиції [Индекс].'"),
				   Новый Структура("Индекс,Значение", Индекс, Символ(034) + Значение + Символ(034)));

КонецФункции // ИсключениеНевозможноПреобразоватьЗначение()
Функция ИсключениеНевозможноПреобразоватьЗначениеНаКлиенте(Индекс, Значение) Экспорт 
	
	Возврат сбисШаблон(НСтр("ru = 'JSON: Невозможно на клиенте преобразовать значение [Значение] в позиции [Индекс].'; uk = 'JSON: Неможливо на клієнті перетворити значення [Значение] у позиції [Индекс].'"),
				   Новый Структура("Индекс,Значение", Индекс, Символ(034) + Значение + Символ(034)));

КонецФункции // ИсключениеНевозможноПреобразоватьЗначениеНаКлиенте()
Функция ИсключениеНекорректныйПараметр(Параметр) Экспорт 
	
	Возврат сбисШаблон(НСтр("ru = 'JSON: Недопустимое значение параметра [Параметр].'; uk = 'JSON: Неприпустиме значення параметра [Параметр].'"),
				   Новый Структура("Параметр", Символ(034) + Параметр+ Символ(034)));

КонецФункции // ИсключениеНекорректныйПараметр()
Функция ИсключениеНедопустимыйТипКлюча(Индекс, Значение) Экспорт 
	
	Если (Индекс = Неопределено) Тогда
		
		Возврат сбисШаблон(НСтр("ru = 'JSON: Недопустимый тип значения ключа [Тип].'; uk = 'JSON: Неприпустимий тип значення ключа [Тип].'"),
					   Новый Структура("Тип", ТипЗнч(Значение)));

	Иначе
		
		Возврат сбисШаблон(НСтр("ru = 'JSON: Недопустимый тип значения ключа [Тип] в позиции [Индекс].'; uk = 'JSON: Неприпустимий тип значення ключа [Тип] в позиції [Индекс].'"),
					   Новый Структура("Индекс,Тип", Индекс, Символ(034) + ТипЗнч(Значение) + Символ(034)));

	КонецЕсли;

КонецФункции // ИсключениеНедопустимыйТипКлюча()
Функция ИсключениеНевозможноВыполнитьЗапрос(Описание) Экспорт 
	
	Позиция = Найти(Описание, "}: "); Если Булево(Позиция) Тогда Позиция = Позиция + 3; Иначе Позиция = 1; КонецЕсли;
	Длина = Найти(Описание, Символы.ПС); Если Булево(Длина) Тогда Длина = Длина - Позиция; Иначе Длина = СтрДлина(Описание); КонецЕсли;
	Возврат НСтр("ru = 'JSON: Невозможно выполнить запрос. '; uk = 'JSON: Неможливо виконати запит. '") + Сред(Описание, Позиция, Длина) + ".";

КонецФункции // ИсключениеНевозможноВыполнитьЗапрос()
//////////////////////////////////////////////////////////////////////////////////

////////////////////// Обычное приложение/////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////
Процедура сбисЗаписатьИзменения(Стр, СтруктураАдреса)
	Контрагент = Стр.Контрагент;
	Набор = РегистрыСведений.КонтактнаяИнформация.СоздатьНаборЗаписей();
	Набор.Отбор.Объект.Установить(Контрагент.Ссылка);
	Набор.Отбор.Тип.Установить(Перечисления.ТипыКонтактнойИнформации.Адрес);
	Набор.Отбор.Вид.Установить(Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
	Набор.Прочитать();
	// Юридический
	Если Набор.Количество()=0 Тогда
		Запись = Набор.Добавить();
		Запись.Объект     = Контрагент.Ссылка;
		Запись.Тип         = Перечисления.ТипыКонтактнойИнформации.Адрес;
		Запись.Вид         = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
	Иначе
		Запись = Набор.Получить(0);	
	КонецЕсли;
	Запись.Поле1 = СтруктураАдреса.Индекс;				// записываем индекс
	Запись.Поле2 = СтруктураАдреса.Регион; 			    // записываем регион
	Запись.Поле3 = СтруктураАдреса.Район; 				// записываем район
	Запись.Поле4 = СтруктураАдреса.Город; 				// записываем город
	Запись.Поле5 = СтруктураАдреса.НаселПункт;			// записываем насленный пункт
	Запись.Поле6 = СтруктураАдреса.Улица;				// записываем улицу
	Запись.Поле7 = СтруктураАдреса.Дом;					// записываем дом
	Запись.Поле8 = СтруктураАдреса.Корпус;				// записываем корпус
	Запись.Поле9 = СтруктураАдреса.Квартира;			// записываем квартиру      
	//Запись.Поле10 = ""; 				// непонятно что в адресе сюда записывается 
	Запись.ТипДома     = СтруктураАдреса.ТипДома;
	Запись.ТипКвартиры = СтруктураАдреса.ТипКвартиры;
	Запись.ТипКорпуса  = СтруктураАдреса.ТипКорпуса;
	Запись.Представление = СбиСПолучитьПредставлениеАдрес(СтруктураАдреса);			//  
	Набор.Записать(Истина);
КонецПроцедуры
Процедура сбисЗаполнитьСтруктуруАдреса(Контрагент, СтруктураАдреса)
	НаборКИ = РегистрыСведений.КонтактнаяИнформация.СоздатьНаборЗаписей();
	НаборКИ.Отбор.Объект.Установить(Контрагент);
	НаборКИ.Отбор.Тип.Установить(Перечисления.ТипыКонтактнойИнформации.Адрес);
	НаборКИ.Отбор.Вид.Установить(Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
	НаборКИ.Прочитать();
	
	Для Каждого ЗаписьАдрес Из НаборКИ Цикл
		СтруктураАдреса.Индекс = ЗаписьАдрес.Поле1; 
		СтруктураАдреса.Регион = ЗаписьАдрес.Поле2; 
		СтруктураАдреса.Район = ЗаписьАдрес.Поле3; 
		СтруктураАдреса.Город = ЗаписьАдрес.Поле4; 
		СтруктураАдреса.НаселПункт = ЗаписьАдрес.Поле5; 
		СтруктураАдреса.Улица = ЗаписьАдрес.Поле6; 
		СтруктураАдреса.Дом = ЗаписьАдрес.Поле7; 
		СтруктураАдреса.Корпус = ЗаписьАдрес.Поле8; 
		СтруктураАдреса.Квартира = ЗаписьАдрес.Поле9; 
		СтруктураАдреса.Представление = ЗаписьАдрес.Представление;
	КонецЦикла;
КонецПроцедуры