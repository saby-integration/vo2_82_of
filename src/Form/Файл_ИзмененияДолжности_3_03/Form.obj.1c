// функции для совместимости кода 
&НаКлиенте
Функция сбисПолучитьФорму(ИмяФормы)
	Если ТипЗнч(ЭтаФорма) = Тип("УправляемаяФорма") Тогда
		Попытка
			ЭтотОбъект="";
		Исключение
		КонецПопытки;
		Возврат ПолучитьФорму("ВнешняяОбработка.СБИС.Форма."+ИмяФормы);
	КонецЕсли;
	Возврат ЭтотОбъект.ПолучитьФорму(ИмяФормы);
КонецФункции
//------------------------------------------------------

&НаКлиенте
Функция ПолучитьДанныеИзДокумента1С(Кэш,Контекст) Экспорт
	// Функция формирует структуру выгружаемого файла и добавляет его в состав пакета
	Попытка	
		//выбранные данные в Контекст.ФайлДанные
		
		Док  = Новый Структура;
		Док.Вставить("Файл",Новый Структура);
		Кэш.ОбщиеФункции.ЗаполнитьАтрибуты(Кэш,"Файл",Контекст.ФайлДанные,Док.Файл);
		Док.Файл.Вставить("Документ",Новый Структура);
		Кэш.ОбщиеФункции.ЗаполнитьАтрибуты(Кэш,"Документ",Контекст.ФайлДанные,Док.Файл.Документ);
		
		Док.Файл.Документ.Вставить("Стороны",Новый Структура);
		Отправитель = "";
		Получатель = "";
		ОтправительРоль=Кэш.ОбщиеФункции.РассчитатьЗначение("Отправитель_Роль", Контекст.ФайлДанные, Кэш);
		ПолучательРоль=Кэш.ОбщиеФункции.РассчитатьЗначение("Получатель_Роль", Контекст.ФайлДанные, Кэш);
		Если Не ЗначениеЗаполнено(ОтправительРоль) Тогда
			ОтправительРоль = "Отправитель";
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ПолучательРоль) Тогда
			ПолучательРоль = "Получатель";
		КонецЕсли;
		Если Контекст.ФайлДанные.Свойство("мСторона") Тогда
			Для Каждого Параметр Из Контекст.ФайлДанные.мСторона Цикл
				Если Параметр.Значение.Свойство("Роль") Тогда
					Роль = Кэш.ОбщиеФункции.РассчитатьЗначение("Роль",Параметр.Значение,Кэш);
				Иначе
					Роль = Кэш.ОбщиеФункции.РассчитатьЗначение("Сторона_Роль",Параметр.Значение,Кэш);
				КонецЕсли;
				Если Роль = ОтправительРоль Тогда
					Сертификат = Кэш.ОбщиеФункции.РассчитатьЗначение("Сертификат",Параметр.Значение,Кэш);
				КонецЕсли;
				Сторона = Кэш.ОбщиеФункции.ПолучитьСторону(Кэш,Параметр.Значение);     //?????
				Если Сторона<>Неопределено Тогда
					Док.Файл.Документ.Стороны.Вставить(Роль,Сторона);
				КонецЕсли;
			КонецЦикла;
			Если Док.Файл.Документ.Стороны.Свойство(ПолучательРоль) Тогда
				Получатель = Док.Файл.Документ.Стороны[ПолучательРоль];
			иначе
			//	Сообщить("Не удалось определить ИНН получателя документа "+строка(Контекст.Документ));
			//	Возврат Ложь;
				Получатель = новый структура("Наименование,ИНН,КПП");
			КонецЕсли;
			Если Док.Файл.Документ.Стороны.Свойство(ОтправительРоль) Тогда
				Отправитель = Док.Файл.Документ.Стороны[ОтправительРоль]; 
			иначе
				Сообщить("Не удалось определить ИНН отправителя документа "+строка(Контекст.Документ));
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
		Если Док.Файл.Свойство("Имя") Тогда
		//	Если Контекст.ФайлДанные.Свойство("мСторона") и Док.Файл.Документ[ПолучательРоль].Свойство("Идентификатор") и Док.Файл.Документ[ОтправительРоль].Свойство("Идентификатор") Тогда
		//		Док.Файл.Имя = Док.Файл.Имя + Док.Файл.Документ[ПолучательРоль].Идентификатор+"_"+Док.Файл.Документ[ОтправительРоль].Идентификатор;
		//	КонецЕсли;
			Док.Файл.Имя = Док.Файл.Имя+"_"+Формат(ТекущаяДата(),"ДФ=ггггММдд")+"_"+строка(Новый УникальныйИдентификатор());
		КонецЕсли;
	
		Для Каждого Параметр Из Контекст.ФайлДанные.мТаблДок Цикл
			Если ТипЗнч(Параметр.Значение) = Тип("Массив") Тогда    // стандартная табличная часть
				ТабЧастьДокумента = Параметр.Значение;
				Док.Файл.Документ.Вставить("Список"+Параметр.ключ,Новый Структура);
				СтрТабл=новый массив;
				Док.Файл.Документ["Список"+Параметр.ключ].Вставить(Параметр.ключ,СтрТабл);
			ИначеЕсли ТипЗнч(Параметр.Значение) = Тип("Структура") и Лев(Параметр.Значение.ТаблДок,1)<>"{" Тогда  // табличная часть из одной строки, которая заполняется прямо из реквизитов документа
				ТабЧастьДокумента = Новый Массив;
				ТабЧастьДокумента.Добавить(Параметр.Значение);
			Иначе   // табличная часть вычисляется с помощью функции
				Кэш.ОбщиеФункции.СкопироватьСтруктуру(Контекст.ФайлДанные, Параметр.Значение);
				ТабЧастьДокумента = Кэш.ОбщиеФункции.РассчитатьЗначение("ТаблДок", Контекст.ФайлДанные, Кэш);
			КонецЕсли;
		
			Если ТипЗнч(ТабЧастьДокумента) = Тип("Массив") Тогда
				//сч=0;
				Для Каждого Стр Из ТабЧастьДокумента Цикл
					ДобавлятьСтроку = ?(Стр.Свойство("ДобавлятьСтроку"),Стр.ДобавлятьСтроку,Истина);
					//сч=сч+1;
					НоваяСтрока = Новый Структура;
					Кэш.ОбщиеФункции.ЗаполнитьАтрибуты(Кэш,"ТаблДок",Стр,НоваяСтрока);
					НоваяСтрока.Вставить("СтараяДолжность",новый структура);
					Кэш.ОбщиеФункции.ЗаполнитьАтрибуты(Кэш,"СтараяДолжность",Стр,НоваяСтрока.СтараяДолжность);
	
					Выборка = СформироватьЗапросПоДаннымРаботникаДоНазначения(Стр.Лицо, Стр.ДатаНачала, Стр.Ссылка).Выбрать();
					Если Выборка.Следующий() Тогда
						НоваяСтрока.СтараяДолжность= новый структура("Дата, Название, Подразделение", 
													формат(Выборка.период,"ДФ=dd.MM.yyyy"), Выборка.Должность);
						НоваяСтрока.СтараяДолжность.Подразделение= новый структура("Филиал,Код,Название",
							?(значениеЗаполнено(Выборка.ПодразделениеОрганизации.КПП) И Выборка.ПодразделениеОрганизации.КПП <> стр.организация.КПП,"Да","Нет"),
							Выборка.ПодразделениеОрганизации.Код, Выборка.ПодразделениеОрганизации.Наименование);
					конецесли;
				
					НоваяСтрока.Вставить("Должность",новый структура);
					Кэш.ОбщиеФункции.ЗаполнитьАтрибуты(Кэш,"Должность",Стр,НоваяСтрока.Должность);
	//			структураXML.файл.Документ.СвПриказ.Должность= новый структура("Дата, Название, ИспытательныйСрок, Штат, Оклад, ПочасоваяОплата, ОсновнаяДолжность,
	//				|ГрафикРаботы, ОплатаТруда, Подразделение", формат(КДокументы.датаНачала,"ДФ=dd.MM.yyyy"), КДокументы.должность.наименование, 
	//				КДокументы.ИспытательныйСрок, КДокументы.ЗанимаемыхСтавок,КДокументы.Оклад,"Да","Да",КДокументы.ГрафикРаботы, КДокументы.СпособРасчета);
					НоваяСтрока.Должность.Вставить("Подразделение",новый структура);
					Кэш.ОбщиеФункции.ЗаполнитьАтрибуты(Кэш,"Подразделение",Стр,НоваяСтрока.Должность.Подразделение);
//			структураXML.файл.Документ.СвПриказ.Должность.Подразделение= новый структура("Филиал,Код,Название",
	//				?(значениеЗаполнено(КДокументы.подразделение.КПП) И КДокументы.подразделение.КПП <> организация.КПП,"Да","Нет"),
	//				КДокументы.подразделение.Код, КДокументы.подразделение.Наименование);
				
					фрм = Кэш.ГлавноеОкно.сбисНайтиФормуФункции("сбисПослеФормированияСтроки","Файл_"+Контекст.ФайлДанные.Файл_Формат+"_"+СтрЗаменить(СтрЗаменить(Контекст.ФайлДанные.Файл_ВерсияФормата, ".", "_"), " ", ""),"Файл_Шаблон", Кэш);
					Если фрм<>Ложь Тогда
						ДобавлятьСтроку = фрм.сбисПослеФормированияСтроки(НоваяСтрока, Кэш, Контекст, Стр);	
					КонецЕсли;
					Если ДобавлятьСтроку<>Ложь Тогда      // <>Ложь написано для совместимости со старыми функциями сбисПослеФормированияСтроки, которые могли ничего не возвращать
						СтрТабл.Добавить(НоваяСтрока);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
					
		ОтветственныйСтруктура = Кэш.ОбщиеФункции.ПолучитьСтруктуруОтветственного(Кэш,Контекст);
		ПодразделениеСтруктура = Кэш.ОбщиеФункции.ПолучитьСтруктуруПодразделения(Кэш,Контекст);
		РегламентСтруктура = Кэш.ОбщиеФункции.ПолучитьСтруктуруРегламента(Кэш,Контекст);
		ОснованияМассив = Кэш.ОбщиеФункции.ПолучитьМассивОснований(Кэш,Контекст);
		ДатаВложения = ?(Док.Файл.Документ.Свойство("Дата"), Док.Файл.Документ.Дата, "");
		НомерВложения = ?(Док.Файл.Документ.Свойство("Номер"), Док.Файл.Документ.Номер, "");
		НазваниеВложения = ?(Док.Файл.Документ.Свойство("Название"), Док.Файл.Документ.Название+" № "+НомерВложения+" от "+ДатаВложения, "");
		Тип = Кэш.ОбщиеФункции.РассчитатьЗначение("Вложение_Тип", Контекст.ФайлДанные,Кэш);
		ПодТип = Кэш.ОбщиеФункции.РассчитатьЗначение("Вложение_ПодТип", Контекст.ФайлДанные,Кэш);
		ВерсияФормата = Кэш.ОбщиеФункции.РассчитатьЗначение("Вложение_ВерсияФормата", Контекст.ФайлДанные,Кэш);
		ПодВерсияФормата = Кэш.ОбщиеФункции.РассчитатьЗначение("Вложение_ПодВерсияФормата", Контекст.ФайлДанные,Кэш);
		Примечание = Кэш.ОбщиеФункции.РассчитатьЗначение("Примечание", Контекст.ФайлДанные,Кэш);

		Вложение = Новый Структура("СтруктураДокумента,Отправитель,Получатель,Ответственный,Подразделение,Регламент,ДокументОснование,
											|Документ1С, Название, Тип, ПодТип, ВерсияФормата,ПодВерсияФормата,Дата,Номер", 
								Док,Отправитель,Получатель,ОтветственныйСтруктура,ПодразделениеСтруктура,РегламентСтруктура,ОснованияМассив, 
								Контекст.Документ, НазваниеВложения, Тип, ПодТип, ВерсияФормата,ПодВерсияФормата,ДатаВложения,НомерВложения);
		//Если ЗначениеЗаполнено(Примечание) Тогда
		//	Вложение.Вставить("Примечание",Примечание);	
		//КонецЕсли;
		//Если ЗначениеЗаполнено(Сертификат) Тогда
		//	Вложение.Вставить("Сертификат",Сертификат);	
		//КонецЕсли;
		Контекст.СоставПакета.Вложение.Добавить(Вложение);
		Возврат Истина;
		
	Исключение
		Если Кэш.Свойство("РезультатОтправки") Тогда
			Кэш.РезультатОтправки.НеСформировано = Кэш.РезультатОтправки.НеСформировано+1;
		КонецЕсли;
		Сообщить(ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;
КонецФункции

функция СформироватьЗапросПоДаннымРаботникаДоНазначения(Сотрудник, датаНачала, ссылка)
	Запрос = новый запрос("ВЫБРАТЬ
	                      |	МАКСИМУМ(Работники.Период) КАК Период,
	                      |	Работники.Сотрудник КАК Сотрудник
	                      |ПОМЕСТИТЬ ДатыПоследнихДвиженийРаботников
	                      |ИЗ
	                      |	РегистрСведений.РаботникиОрганизаций КАК Работники
	                      |ГДЕ
	                      |	Работники.Период <= &ДатаНачала
	                      |	И Работники.Сотрудник = &Сотрудник
	                      |	И Работники.ПервичныйДокумент <> &Ссылка
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	Работники.Сотрудник
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ДатыПоследнихДвиженийРаботников.Период КАК Период,
	                      |	ДанныеПоРаботникуДоНазначения.ПериодЗавершения КАК ПериодЗавершения,
	                      |	ДатыПоследнихДвиженийРаботников.Сотрудник КАК Сотрудник,
	                      |	ДанныеПоРаботникуДоНазначения.ЗанимаемыхСтавок КАК ЗанимаемыхСтавок,
	                      |	ДанныеПоРаботникуДоНазначения.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	                      |	ДанныеПоРаботникуДоНазначения.Должность КАК Должность,
	                      |	ДанныеПоРаботникуДоНазначения.ЗанимаемыхСтавокЗавершения КАК ЗанимаемыхСтавокЗавершения,
	                      |	ДанныеПоРаботникуДоНазначения.ПодразделениеОрганизацииЗавершения КАК ПодразделениеОрганизацииЗавершения,
	                      |	ДанныеПоРаботникуДоНазначения.ДолжностьЗавершения КАК ДолжностьЗавершения
	                      |ПОМЕСТИТЬ ДанныеПоРаботникуДоНазначения
	                      |ИЗ
	                      |	ДатыПоследнихДвиженийРаботников КАК ДатыПоследнихДвиженийРаботников
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ДанныеПоРаботникуДоНазначения
	                      |		ПО (ДанныеПоРаботникуДоНазначения.Период = ДатыПоследнихДвиженийРаботников.Период)
	                      |			И ДатыПоследнихДвиженийРаботников.Сотрудник = ДанныеПоРаботникуДоНазначения.Сотрудник
	                      |			И (ДанныеПоРаботникуДоНазначения.ПервичныйДокумент <> &Ссылка)
	                      |
	                      |ИНДЕКСИРОВАТЬ ПО
	                      |	Сотрудник
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ВЫБОР
	                      |		КОГДА ДанныеПоРаботникуДоНазначения.ПериодЗавершения <= &ДатаНачала
	                      |				И ДанныеПоРаботникуДоНазначения.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	                      |			ТОГДА ДанныеПоРаботникуДоНазначения.ЗанимаемыхСтавокЗавершения
	                      |		ИНАЧЕ ДанныеПоРаботникуДоНазначения.ЗанимаемыхСтавок
	                      |	КОНЕЦ КАК ЗанимаемыхСтавок,
	                      |	ВЫБОР
	                      |		КОГДА ДанныеПоРаботникуДоНазначения.ПериодЗавершения <= &ДатаНачала
	                      |				И ДанныеПоРаботникуДоНазначения.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	                      |			ТОГДА ДанныеПоРаботникуДоНазначения.ПодразделениеОрганизацииЗавершения
	                      |		ИНАЧЕ ДанныеПоРаботникуДоНазначения.ПодразделениеОрганизации
	                      |	КОНЕЦ КАК ПодразделениеОрганизации,
	                      |	ВЫБОР
	                      |		КОГДА ДанныеПоРаботникуДоНазначения.ПериодЗавершения <= &ДатаНачала
	                      |				И ДанныеПоРаботникуДоНазначения.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	                      |			ТОГДА ДанныеПоРаботникуДоНазначения.ДолжностьЗавершения
	                      |		ИНАЧЕ ДанныеПоРаботникуДоНазначения.Должность
	                      |	КОНЕЦ КАК Должность,
	                      |	ДанныеПоРаботникуДоНазначения.Период
	                      |ИЗ
	                      |	ДанныеПоРаботникуДоНазначения КАК ДанныеПоРаботникуДоНазначения");
	
	Запрос.УстановитьПараметр("Сотрудник",	Сотрудник);
	Запрос.УстановитьПараметр("датаНачала",	датаНачала);
	Запрос.УстановитьПараметр("Ссылка",	Ссылка);
	
	Возврат Запрос.Выполнить();
конецфункции

