
#Область include_local_ПолучитьМодульОбъекта
#КонецОбласти

&НаКлиенте
Процедура СопоставитьДокументы(Команда)
	// Процедура вызывает форму сопоставления документов	
	Обновить = Ложь;
	СписокОтмеченныхДокументов = ТаблДокПолучитьВыбранныеСтроки();
	Если СписокОтмеченныхДокументов.Количество()>0 Тогда
		фрм = сбисПолучитьФорму("ФормаСопоставитьСДокументами1С");
		Обновить = фрм.Показать(Кэш,СписокОтмеченныхДокументов);
		//закомментировано, т.к. теперь сопоставление идет по вложениям
		//ИначеЕсли СписокОтмеченныхДокументов.Количество()=1 Тогда	 
		//	фрм = сбисПолучитьФорму("ФормаСопоставитьСДокументом1С");
		//	Обновить = фрм.Показать(Кэш,СписокОтмеченныхДокументов);
	Иначе 
		Предупреждение("Не выбран ни один документ");
	КонецЕсли;
	//Если Обновить=Истина Тогда
	//	ОбновитьКонтент();
	//КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьДокументы(Команда)
	// Процедура запускает отправку документов по отмеченным записям	
	Если ОтметитьВсе = Истина и ЗаписейНаСтранице1С<>"все" и (ФильтрСтраница<>1 или ФильтрЕстьЕще) Тогда // отмечены все записи на странице и есть еще страницы
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(1, "С текущей страницы");
		Кнопки.Добавить(2, "Все документы");
		Ответ = Вопрос("Отправить документы только с текущей страницы или все документы списка?", Кнопки);
		Если Ответ = 2 Тогда
			ВсеДокументы = Истина;
			ИмяРеестра="";	Ини="";
			Если Кэш.Разделы.Продажа.Свойство(Кэш.Текущий.Имя,ИмяРеестра)=Ложь Тогда
				Возврат;
			КонецЕсли;
			Если Кэш.ини.Свойство(ИмяРеестра,Ини)=Ложь Тогда
				Возврат;
		ИначеЕсли Ини = Неопределено Тогда
			Ини = Кэш.ФормаНастроек.Ини(Кэш, ИмяРеестра);
			КонецЕсли;
			СтруктураДляОбновленияФормы = Кэш.ОбщиеФункции.сбисОбновитьРеестрДокументов1С(Ини, Кэш);
			СписокОтмеченныхДокументов = Новый СписокЗначений;
			СписокОтмеченныхДокументов.ЗагрузитьЗначения( СтруктураДляОбновленияФормы.Таблица_РеестрДокументов);
		Иначе
			СписокОтмеченныхДокументов = ТаблДокПолучитьВыбранныеСтроки();
		КонецЕсли;
	Иначе
		СписокОтмеченныхДокументов = ТаблДокПолучитьВыбранныеСтроки();
	КонецЕсли;
	ВсеДокументы = Ложь;
	ИмяДокумента = Кэш.Текущий.ТипДок;
	фрм = сбисНайтиФормуФункции("ОтправитьДокументы","Документ_"+ИмяДокумента,"Документ_Шаблон", Кэш);
	фрм.ОтправитьДокументы(Кэш,СписокОтмеченныхДокументов);
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьДокументыТурбоРежим(Команда)
	Если ОтметитьВсе = Истина и ЗаписейНаСтранице1С<>"все" и (ФильтрСтраница<>1 или ФильтрЕстьЕще) Тогда // отмечены все записи на странице и есть еще страницы
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(1, "С текущей страницы");
		Кнопки.Добавить(2, "Все документы");
		Ответ = Вопрос("Отправить документы только с текущей страницы или все документы списка?", Кнопки);
		ОтправитьВыбранныеДокументыТурбоРежим(Ответ, Неопределено)
	Иначе
		ОтправитьВыбранныеДокументыТурбоРежим(1, Неопределено);
	КонецЕсли;
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////

////////////////////// Обычное приложение/////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////
Процедура ПриОткрытии()
	Аккордеон = Новый Структура();
	ПолучитьРеквизитОбъектаДокумента();
	ЭлементыФормы.ПанельОжидания.Видимость = Ложь;
	НазваниеКонфигурации = Метаданные.Синоним;
	ЭтаФорма.ПодключитьОбработчикОжидания("ПослеОткрытия",0.1,Истина);
КонецПроцедуры
Функция ПриОткрытииИзвне() Экспорт	
	ПослеУстановитьРасширениеРаботыСФайлами();
	Возврат Кэш;
КонецФункции
Функция сбисОтправкаИзвне(МассивСтрок) Экспорт	
	ПриОткрытииИзвне();
	фрм = сбисПолучитьФорму("Документ_Шаблон");
	Кэш.Текущий.Вставить("Форма",сбисПолучитьФорму("Раздел_Продажа_Шаблон"));
	фрм.ОтправитьДокументы(Кэш,МассивСтрок);
КонецФункции
Процедура ЗаписейНаСтраницеПриИзменении(Элемент)
	// Меняет количество отбражаемых записей в реестрах СБИС	
	ФильтрСтраница = 1;
	ПараметрыПриИзменении(Элемент);
	ОбновитьКонтент();
КонецПроцедуры
Процедура ОбновитьПоляФормы(СтруктураДляОбновленияФормы) Экспорт
	// Обновляет данные на главном окне	
	Если ТипЗнч(СтруктураДляОбновленияФормы) = Тип("Структура") Тогда
		Для Каждого Элемент Из СтруктураДляОбновленияФормы Цикл
			Если ТипЗнч(ЭтаФорма[Элемент.Ключ]) = Тип("ТаблицаЗначений") Тогда
				//ТаблицаДанных = МассивСтруктурВТаблицуЗначений(Элемент.Значение);
				//ЭтаФорма[Элемент.Ключ].ЗаполнитьЗначения(ТаблицаДанных);
				//
				ЭтаФорма[Элемент.Ключ].Очистить();
				Если ЗначениеЗаполнено(Элемент.Значение) Тогда
					Для Каждого Стр Из Элемент.Значение Цикл
						СтрТ = ЭтаФорма[Элемент.Ключ].Добавить();
						ЗаполнитьЗначенияСвойств(СтрТ, Стр);		
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла
	КонецЕсли;
КонецПроцедуры

#Область include_core_vo2_ОбщиеФункции_ФормаГлавноеОкно_Аккордеон
#КонецОбласти

#Область include_core_vo3_Аккордеон
#КонецОбласти

Процедура ТаблДокПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	// Оформление строки таблицы документов	
	Попытка
		фрм = ЭтотОбъект.ПолучитьФорму(Элемент.Имя);
	Исключение	
		Сообщить("Нет формы для '"+Элемент.Имя+"'");
	КонецПопытки;	
	фрм.ТаблДокПриВыводеСтроки(Кэш, Элемент, ОформлениеСтроки, ДанныеСтроки);
КонецПроцедуры
//Процедура ОткрытьПанельМассовыхОпераций(Элемент)
//	ЭлементыФормы.ПанельМассовыхОпераций.Видимость = Истина;
//КонецПроцедуры
//Процедура ЗакрытьПанельМассовыхОпераций(Элемент)
//	ЭлементыФормы.ПанельМассовыхОпераций.Видимость = Ложь;
//КонецПроцедуры
Процедура ТабУстановленныеИниФайлыВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	// Процедура отключает выбранный файл настроек
	СтрокиОбработать = Новый Массив();
	СтрокиОбработать.Добавить(ВыбраннаяСтрока);
	Кэш.ФормаНастроекОбщее.сбисОтключитьФайлыНастроек(Кэш, СтрокиОбработать);
КонецПроцедуры

//Панель фильра
Процедура ФильтрЗакрытьПанельУстановки(Элемент)
	// Закрывает панель фильтра	
	ЭлементыФормы.ПанельУстановкиФильтра.Видимость = Ложь;
КонецПроцедуры
Процедура ФильтрОткрытьПанельУстановки(Элемент)
	// Открывает панель фильтра	  
	ФильтрУстановитьВидимость(Число(ФильтрПериод));

	ТекущийРаздел = Кэш.Разделы["р"+Кэш.Текущий.Раздел];
	фрм = сбисПолучитьФорму("ФормаГлавноеОкно").сбисНайтиФормуФункции("ФильтрУстановитьВидимость","Раздел_"+ТекущийРаздел+"_"+Кэш.Текущий.ТипДок,"Раздел_"+ТекущийРаздел+"_Шаблон",Кэш);	
	фрм.ФильтрУстановитьВидимость(ЭтаФорма);
	ЭлементыФормы.ПанельУстановкиФильтра.Видимость = Истина;
	ЭлементыФормы.ФильтрСостояние.СписокВыбора = СписокСостояний;
	ЭлементыФормы.ФильтрСостояние.Значение = ФильтрСостояние;
	ЭлементыФормы.ФильтрТипыДокументов.СписокВыбора.Очистить();
	ЭлементыФормы.ФильтрТипыДокументов.СписокВыбора.Добавить("ЭДОНакл", "Накладные");
    ЭлементыФормы.ФильтрТипыДокументов.СписокВыбора.Добавить("АктВР", "Акты (услуги, работы, права)");
    ЭлементыФормы.ФильтрТипыДокументов.СписокВыбора.Добавить("СчФктр,УпдСчфДоп",	"Счета-фактуры (вкл.в составе УПД)");
    ЭлементыФормы.ФильтрТипыДокументов.СписокВыбора.Добавить("УпдДоп", "Передаточные документы");
    ЭлементыФормы.ФильтрТипыДокументов.СписокВыбора.Добавить("счФактКор,УкдКсчфДис", "Счета-фактуры корректировочные (вкл. в составе УКД)");
	ЭлементыФормы.ФильтрТипыДокументов.СписокВыбора.Добавить("УкдДис", "УКД");
    ЭлементыФормы.ФильтрТипыДокументов.СписокВыбора.Добавить("АктСвер", "Акты сверки");
    ЭлементыФормы.ФильтрТипыДокументов.СписокВыбора.Добавить("Договор", "Договоры");
    ЭлементыФормы.ФильтрТипыДокументов.СписокВыбора.Добавить("ЭДОСч", "Счета");
	ЭлементыФормы.ФильтрТипыДокументов.СписокВыбора.Добавить("АктПриемки", "Акты о приемке");
	ЭлементыФормы.ФильтрТипыДокументов.СписокВыбора.Добавить("Заказ", "Заказы поставщикам");
 	ЭлементыФормы.ФильтрТипыДокументов.СписокВыбора.СортироватьПоПредставлению();
	
	
	ЭлементыФормы.ФильтрТипыДокументов.Значение = ФильтрТипыДокументов;
КонецПроцедуры
Процедура ФильтрУстановить(Элемент)
	// Обновляет данные в соответствии с выбранными параметрами фильтра	
	ФильтрЗакрытьПанельУстановки(1);
	ФильтрСтраница = 1;
	НазваниеРаздела = Кэш.Разделы["р"+Кэш.Текущий.Раздел];
	ФормаДопФильтра = сбисНайтиФормуФункции("сбисСписокДопПараметровФильтра","Фильтр_Раздел_"+НазваниеРаздела+"_"+Кэш.Текущий.ТипДок,"Фильтр_Раздел_"+НазваниеРаздела+"_Шаблон", Кэш);
	Если ФормаДопФильтра<>ложь Тогда
		УстановитьДополнительныеПараметрыФильтра(ФормаДопФильтра);	
	КонецЕсли;
	
	ФильтрОбновитьПанель();
	сбисСохранитьФильтрРаздела(Кэш);
	ОбновитьКонтент();
КонецПроцедуры
Процедура ФильтрОчистить(Элемент)
	// Устанавливает фильтр по умолчанию для текущего раздела	
	Кэш.Текущий.Форма.ФильтрОчистить(Кэш);
	ФильтрОбновитьПанель();	
	сбисСохранитьФильтрРаздела(Кэш);
	ОбновитьКонтент();
КонецПроцедуры
Процедура ФильтрОбновитьПанель() Экспорт
	// Формирует строковое представление по всем установленным параметрам фильтра	
	ТекущееЗначениеФильтра="";
	Если Число(ФильтрПериод)>0 Тогда
		ТекущееЗначениеФильтра = ЭтаФорма.ЭлементыФормы.ФильтрПериод.ВыделенныйТекст;	
	иначеЕсли Число(ФильтрПериод)=-1 Тогда
		ТекущееЗначениеФильтра = ЭтаФорма.ЭлементыФормы.ФильтрПериод.ВыделенныйТекст+" "+ФильтрПериодПрописью(ФильтрДатаНач, ФильтрДатаКнц);	//Сюда код который делает строку как онлайне
	Иначе
		ТекущееЗначениеФильтра = "";
	КонецЕсли;
	если ЗначениеЗаполнено(ФильтрТипыДокументов) И (кэш.текущий.типДок="Отправленные" или кэш.текущий.типДок="Полученные") тогда // Фильтр заполнен и в этом разделе будет действовать
		списокТипДок="";
		для каждого типДок из ФильтрТипыДокументов цикл 
			списокТипДок=списокТипДок+типДок.представление+",";
		конеццикла;
		ТекущееЗначениеФильтра = ТекущееЗначениеФильтра + ", " + лев(списокТипДок,СтрДлина (списокТипДок)-1);	
	конецесли;
	Если ЗначениеЗаполнено(ФильтрКонтрагент) Тогда
		ТекущееЗначениеФильтра = ТекущееЗначениеФильтра + ", " + строка(ФильтрКонтрагент);	
	КонецЕсли;
	Если ЗначениеЗаполнено(ФильтрСостояние) и ФильтрСостояние<>"Все документы" Тогда
		ТекущееЗначениеФильтра = ТекущееЗначениеФильтра + ", "+ЭтаФорма.ЭлементыФормы.ФильтрСостояние.ВыделенныйТекст;	
	КонецЕсли;
	Если ЗначениеЗаполнено(ФильтрОрганизация) Тогда
		ТекущееЗначениеФильтра = ТекущееЗначениеФильтра + ", " + строка(ФильтрОрганизация);	
	КонецЕсли;
	Если ЗначениеЗаполнено(ФильтрОтветственный) Тогда
		ТекущееЗначениеФильтра = ТекущееЗначениеФильтра + ", " + строка(ФильтрОтветственный);	
	КонецЕсли;
	Если ЗначениеЗаполнено(ФильтрКонтрагентПодключен) Тогда
		ТекущееЗначениеФильтра = ТекущееЗначениеФильтра + ", " + строка(ФильтрКонтрагентПодключен);	
	КонецЕсли;
	Если ЗначениеЗаполнено(ФильтрМаска) Тогда
		ТекущееЗначениеФильтра = ТекущееЗначениеФильтра + ", " + строка(ФильтрМаска);	
	КонецЕсли;	
	//Добавим дополнительные параметры фильтра для текущего раздела
	НазваниеРаздела = Кэш.Разделы["р"+Кэш.Текущий.Раздел];
	ФормаДопФильтра = сбисНайтиФормуФункции("сбисСписокДопПараметровФильтра","Фильтр_Раздел_"+НазваниеРаздела+"_"+Кэш.Текущий.ТипДок,"Фильтр_Раздел_"+НазваниеРаздела+"_Шаблон", Кэш);
	Если ФормаДопФильтра<>ложь Тогда
		СписокДопЭлементов = ФормаДопФильтра.сбисСписокДопПараметровФильтра();
		Для Каждого Элемент Из СписокДопЭлементов Цикл
			Если Кэш.ПараметрыФильтра.Свойство(Элемент.Значение) и ЗначениеЗаполнено(Кэш.ПараметрыФильтра[Элемент.Значение]) Тогда
				ТекущееЗначениеФильтра = ТекущееЗначениеФильтра + ", " + строка(Кэш.ПараметрыФильтра[Элемент.Значение]);				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Лев(ТекущееЗначениеФильтра, 2) = ", " Тогда
		ТекущееЗначениеФильтра = Сред(ТекущееЗначениеФильтра,3);
	КонецЕсли;
	
	Если ТекущееЗначениеФильтра="" тогда
		ЭлементыФормы.ПанельФильтра.ТекущаяСтраница = ЭлементыФормы.ПанельФильтра.Страницы["ФильтраНет"];		
	иначе
		//		ЭлементыФОрмы.ТекущееЗначениеФильтра.Заголовок = ТекущееЗначениеФильтра;
		ЭлементыФормы.ПанельФильтра.ТекущаяСтраница = ЭлементыФормы.ПанельФильтра.Страницы["ФильтрЕсть"];		
	КонецЕсли;
КонецПроцедуры
Процедура ФильтрУстановитьВидимость(Период)
	// Устанавливает видимость элементов фильтра	
	Если(Период<0) Тогда
		ЭтаФорма.ЭлементыФормы.ФильтрДатаНач.Видимость = Истина;
		ЭтаФорма.ЭлементыФормы.ФильтрДатаКнц.Видимость = Истина;
		ЭтаФорма.ЭлементыФормы.НадписьФильтрДатаНач.Видимость = Истина;
		ЭтаФорма.ЭлементыФормы.НадписьФильтрДатаКнц.Видимость = Истина;
	иначе
		ЭтаФорма.ЭлементыФормы.ФильтрДатаНач.Видимость = Ложь;
		ЭтаФорма.ЭлементыФормы.ФильтрДатаКнц.Видимость = Ложь;
		ЭтаФорма.ЭлементыФормы.НадписьФильтрДатаНач.Видимость = Ложь;
		ЭтаФорма.ЭлементыФормы.НадписьФильтрДатаКнц.Видимость = Ложь;
	КонецЕсли;
	
    //По умолчанию устанавливаем видимость для полей Контрагент, Состояние, Организация
	СбисПолучитьЭлементФормы(ЭтаФорма, "ФильтрКонтрагент").Видимость 	= Истина;
	СбисПолучитьЭлементФормы(ЭтаФорма, "ФильтрОрганизация").Видимость	= Истина;
	СбисПолучитьЭлементФормы(ЭтаФорма, "ФильтрСостояние").Видимость		= Истина;
КонецПроцедуры
Процедура ФильтрПриИзмененииПериода(Элемент)
	// Рассчитывает начальную и конечную дату в зависимости от выбранного периода	
	Значение = Число(Элемент.Значение);
	ФильтрУстановитьВидимость(Значение);
	Если(Значение=0) Тогда
		ФильтрДатаНач="";
		ФильтрДатаКнц="";
		Возврат;
	КонецЕсли;
	Если(Значение=0.1) Тогда
		ФильтрДатаНач = ТекущаяДата();
		ФильтрДатаКнц = ТекущаяДата();
		Возврат;
	КонецЕсли;
	Если(Значение>=1) Тогда
		ФильтрДатаКнц = ТекущаяДата();
		ФильтрДатаНач = ДобавитьМесяц(ФильтрДатаКнц,Значение*-1);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры
Процедура ФильтрТипыДокументовНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;  
	Для Каждого элементВыбора из Элемент.СписокВыбора цикл		
		Если ФильтрТипыДокументов.НайтиПоЗначению(элементВыбора.значение) <>неопределено Тогда
			элементВыбора.Пометка=истина;
		КонецЕсли;
	КонецЦикла;
	
	Элемент.СписокВыбора.ОтметитьЭлементы("Выберите типы");
	ФильтрТипыДокументов.Очистить();
	Для Каждого элементВыбора из Элемент.СписокВыбора цикл
		Если элементВыбора.Пометка Тогда
			ФильтрТипыДокументов.Добавить(элементВыбора.значение, элементВыбора.представление);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
&НаКлиенте
Процедура сбисСохранитьФильтрРаздела(Кэш) Экспорт
	ТекущийФильтр = сбисСохранитьТекущийФильтр(Кэш);
	Если ЗначениеЗаполнено(Кэш.Текущий.Раздел) Тогда
		Кэш.Парам.ФильтрыПоРазделам.Вставить(Кэш.Разделы["р"+Кэш.Текущий.Раздел], ТекущийФильтр);
	КонецЕсли;
КонецПроцедуры
// Навигация
Процедура КоманднаяПанельНавигацияПоСтраницам(Кнопка)
	// Осуществляет переход по страницам в реестрах СБИС	
	Если Кнопка.Имя = "НавигацияПерваяСтраница" Тогда
		ФильтрСтраница = 1;
	КонецЕсли;
	Если Кнопка.Имя = "НавигацияПредыдущаяСтраница" Тогда
		ФильтрСтраница = ФильтрСтраница-1;
	КонецЕсли;
	Если Кнопка.Имя = "НавигацияСледующаяСтраница" Тогда
		ФильтрСтраница = ФильтрСтраница+1;
	КонецЕсли;
	Если Кнопка.Имя = "НавигацияПоследняяСтраница" Тогда
		ФильтрСтраница = 0;
	КонецЕсли;
	ОбновитьКонтент();
КонецПроцедуры

Процедура ОтметитьВсеПриИзменении(Элемент)
	// Отмечает все записи в таблице документов	
	Для Каждого Строка Из Кэш.ТаблДок.Значение Цикл
		Строка.Отмечен = Элемент.Значение;
	КонецЦикла;
КонецПроцедуры

// Утверждение/Отклонение
Процедура КонтекстноеМенюПолученныеУтвердитьОтклонить(Кнопка)
	// Выполняет утверждение/отклонение отмеченных документов	
	СписокОтмеченныхДокументов = ТаблДокПолучитьВыбранныеСтроки();
	фрм = сбисНайтиФормуФункции("сбисУтвердитьОтклонить","РаботаСДокументами1С","",Кэш);
	фрм.сбисУтвердитьОтклонить(Кэш,СписокОтмеченныхДокументов, Кнопка.Имя);
	ОбновитьКонтент();
КонецПроцедуры
&НаКлиенте
Функция ОбновитьКонтент() Экспорт
	// Обновляет данные на главном окне	
	Если Кэш.ТаблДок = "" Тогда   // Если открыта сама обработка, а отправку делаем из карточки документа 1С, то ничего не обновляем
		Возврат "";
	КонецЕсли;
	//Получим имя и значение реквизита по которому будем искать текущую строку
	ЗначениеПоиска = Неопределено;
	Если ТипЗнч(Кэш.ТаблДок.ТекущиеДанные) <> Тип("Неопределено") Тогда
		Если Кэш.ТаблДок.Имя = "Таблица_РеестрДокументов" Тогда
			РеквизитПоиска = "Документ1С";
		Иначе
			РеквизитПоиска = "ИдСБИС";
		КонецЕсли;
		Попытка
			ЗначениеПоиска = Кэш.ТаблДок.ТекущиеДанные[РеквизитПоиска]	
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	СтруктураДляОбновленияФормы = Кэш.Текущий.Форма.ОбновитьКонтент(Кэш);
	ОбновитьПоляФормы(СтруктураДляОбновленияФормы);
	
	//Найдем строку в новой таблице по имени и значению реквизита
	Если ЗначениеПоиска <> Неопределено и ТипЗнч(СтруктураДляОбновленияФормы) = Тип("Структура") Тогда
		Для Каждого Элемент Из СтруктураДляОбновленияФормы Цикл
			ТаблПоиска = ЭтаФорма[Элемент.Ключ];
			ПараметрыОтбора = Новый Структура(РеквизитПоиска, ЗначениеПоиска);
			Строка = ТаблПоиска.НайтиСтроки(ПараметрыОтбора);
			//Берем первую строку из массива (Т.к. поиск по документу или по ИдСБИС, то строка единственная в таблице)
			Если Строка.Количество() <> 0 Тогда
				Кэш.ТаблДок.ТекущаяСтрока = Строка[0];
			КонецЕсли;	
		КонецЦикла;
	КонецЕсли;
	
КонецФункции
&НаКлиенте
Процедура СохранитьПакет(Элемент)
	// Сохраняет пакеты документов на диск (+ pdf файлы вложений)	
	СписокОтмеченныхДокументов = ТаблДокПолучитьВыбранныеСтроки();
	СписокПакетов = Новый массив;
	Для Каждого Элемент Из СписокОтмеченныхДокументов Цикл
		СписокПакетов.Добавить(Элемент.Значение.СоставПакета[0].Значение);
	КонецЦикла;
	Кэш.ОбщиеФункции.СохранитьПакетыНаДиск(Кэш, СписокПакетов);
КонецПроцедуры
//Процедура ФильтрПриИзменении(Элемент)
//	Кэш.ПараметрыФильтра.Вставить(Элемент.Имя, Элемент.Значение);
//КонецПроцедуры
//Вынесено на форму общей работы с настройками
//Функция ДобавитьСбисДополнительныеПараметрыФильтра(ФормаДопФильтра) Экспорт
//	// Добавляет на форму главного окна все элементы пользовательских фильтров	
//	СписокДопЭлементов =  ФормаДопФильтра.сбисСписокДопПараметровФильтра();
//	ЭтаФорма.ЭлементыФормы.ПанельУстановкиФильтра.Высота = ФормаДопФильтра.ЭлементыФормы.ПанельУстановкиФильтра.Высота;
//	Для Каждого ДопЭлемент Из СписокДопЭлементов Цикл
//		Попытка  // на случай, если один и тот же элемент используется в нескольких разделах
//			Элемент = ФормаДопФильтра.ЭлементыФормы[ДопЭлемент.Значение];
//			ЭтаФорма.ЭлементыФормы.Добавить(ТипЗнч(Элемент), Элемент.Имя, Истина, ЭтаФорма.ЭлементыФормы.ПанельУстановкиФильтра);
//			Если ТипЗнч(Элемент) = Тип("ПолеВвода") или ТипЗнч(Элемент) = Тип("ПолеВыбора") или ТипЗнч(Элемент) = Тип("Флажок") Тогда
//				ЭтаФорма.ЭлементыФормы[Элемент.Имя].ТипЗначения = Элемент.ТипЗначения;
//				ЭтаФорма.ЭлементыФормы[Элемент.Имя].ЦветТекстаКнопки = Элемент.ЦветТекстаКнопки;
//				ЭтаФорма.ЭлементыФормы[Элемент.Имя].ЦветФонаКнопки = Элемент.ЦветФонаКнопки;
//				ЭтаФорма.ЭлементыФормы[Элемент.Имя].ЦветРамки = Элемент.ЦветРамки;
//				Если ТипЗнч(Элемент) <> Тип("Флажок") Тогда
//					ЭтаФорма.ЭлементыФормы[Элемент.Имя].КнопкаВыбора = Элемент.КнопкаВыбора;
//				КонецЕсли;
//				Кэш.ПараметрыФильтра.Вставить(Элемент.Имя,Элемент.Значение);
//			КонецЕсли;
//			Если ТипЗнч(Элемент) = Тип("Флажок") Тогда
//				ЭтаФорма.ЭлементыФормы[Элемент.Имя].Заголовок = Элемент.Заголовок;
//			КонецЕсли;
//			Если ТипЗнч(Элемент) = Тип("ПолеВыбора") Тогда
//				ЭтаФорма.ЭлементыФормы[Элемент.Имя].СписокВыбора = Элемент.СписокВыбора;
//			КонецЕсли;
//			ЭтаФорма.ЭлементыФормы[Элемент.Имя].Значение = Элемент.Значение;
//			ЭтаФорма.ЭлементыФормы[Элемент.Имя].Высота = Элемент.Высота;
//			ЭтаФорма.ЭлементыФормы[Элемент.Имя].Ширина = Элемент.Ширина;
//			ЭтаФорма.ЭлементыФормы[Элемент.Имя].Лево = Элемент.Лево;
//			ЭтаФорма.ЭлементыФормы[Элемент.Имя].Верх = Элемент.Верх;
//			ЭтаФорма.ЭлементыФормы[Элемент.Имя].ЦветТекста = Элемент.ЦветТекста;
//			ЭтаФорма.ЭлементыФормы[Элемент.Имя].Видимость = Ложь;
//			ЭтаФорма.ЭлементыФормы[Элемент.Имя].Шрифт = Элемент.Шрифт;
//		Исключение
//		КонецПопытки;
//	КонецЦикла;
//	
//КонецФункции
&НаКлиенте
Процедура ВерсияНажатие(Элемент)
	// Открывает хистори обработки.
	ФормаНовости = сбисПолучитьФорму("ФормаНовости",,,ЭтаФорма);
    ФормаНовости.Открыть();
КонецПроцедуры

Процедура сбисЗаполнитьСписокСправочника(Ини) Экспорт
	// Заполняет дерево значений по справочнику
	ИмяСправочника = СокрЛП(Сред(Ини.СправочникТип.Значение, Найти(Ини.СправочникТип.Значение, ".")+1));
	Если Ини.Свойство("ЗапросСпискаЭлементов") Тогда
		ТекстЗапроса = СокрЛП(Ини.ЗапросСпискаЭлементов.Значение);
		Запрос = Новый Запрос(Сред(ТекстЗапроса,2,СтрДлина(ТекстЗапроса)-2));
	Иначе
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ЗаписьСправочника.Ссылка,ЗаписьСправочника.Наименование,ЗаписьСправочника.Код, Ложь КАК Отмечен ИЗ Справочник."+ИмяСправочника+" КАК ЗаписьСправочника ГДЕ (НЕ(ЗаписьСправочника.ЭтоГруппа) и НЕ ЗаписьСправочника.ПометкаУдаления)ИТОГИ ПО ЗаписьСправочника.Ссылка ТОЛЬКО ИЕРАРХИЯ");
	КонецЕсли;
	Таблица_РеестрСправочников = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
КонецПроцедуры

&НаКлиенте
Процедура ПометкаПриИзменении(Элемент)
	// Отмечает вложенные записи дерева значений при отметке группы
	ТекущиеДанные = ЭлементыФормы.Таблица_РеестрСправочников.ТекущиеДанные;
	ПроставитьПометкиВниз(ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ПроставитьПометкиВниз(ТекущиеДанные)
	// Отмечает вложенные записи дерева значений при отметке группы
	Потомки = ТекущиеДанные.Строки;
	Значение = ТекущиеДанные.Отмечен;
	Для каждого Потомок из Потомки Цикл
		Потомок.Отмечен = Значение;
		ПроставитьПометкиВниз(Потомок);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьВыбранныеСтроки(СписокОтмеченных, Потомки)
	// Получает выбранные строки дерева значений
	Для каждого Потомок из Потомки Цикл
		ПотомкиПотомка = Потомок.Строки;
		Если ПотомкиПотомка.Количество()=0 Тогда
			Если Потомок.Отмечен Тогда
				СписокОтмеченных.Добавить(Потомок.Ссылка);
			КонецЕсли;
		Иначе
			ПолучитьВыбранныеСтроки(СписокОтмеченных,ПотомкиПотомка);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьВсеДерево(Команда)
	// Отмечает все записи в дереве значений
	Потомки = Таблица_РеестрСправочников.Строки;
	Для Каждого Потомок Из Потомки Цикл
		Потомок.Отмечен = ОтметитьВсе;
		ПроставитьПометкиВниз(Потомок);
	КонецЦикла;
КонецПроцедуры

Процедура ОткрытьЗаписьСправочника(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	// Открывает карточку записи справочника
	ОткрытьЗначение(ВыбраннаяСтрока.Ссылка);
КонецПроцедуры

Процедура Таблица_НоменклатураКонтрагентовВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	ИзменитьНоменклатуру();
КонецПроцедуры

//Список клиентских форм формируется при подключении заплаток
&НаКлиенте
Процедура ОтправитьКорреспонденцию(Команда)
	фрм = сбисНайтиФормуФункции("ПоказатьФорму","ФормаОтправкиКорреспонденции","",Кэш);	
	фрм.ПоказатьФорму(Кэш);
КонецПроцедуры

//&НаСервере
Процедура НастроитьКолонкиНаСервере(имяТаблицы, Знач ВидимыеКолонки, Ини) экспорт  // alo СтатусГос
	// Создание ТаблицыЗначений с описанием колонок
	ЭлементТаблица = ЭлементыФормы[имяТаблицы];
	РеквизитТаблица = Этаформа[имяТаблицы];
	индекс = 0;
	Для Каждого Колонка Из ВидимыеКолонки Цикл
		Если ини.Свойство("Реестр1С_"+Колонка.Имя) Тогда
			Колонка.Ини = ини["Реестр1С_"+Колонка.Имя];
		КонецЕсли;
		КолонкаТЗ = РеквизитТаблица.Колонки.Найти(Колонка.Имя);
		Если КолонкаТЗ = Неопределено Тогда
			ОписаниеТипа = Неопределено;
			Если Колонка.Ини.Свойство("Тип") Тогда
				Если Колонка.Ини.Тип = "Строка" Тогда
	 				КвалификаторыСтроки = Новый КвалификаторыСтроки;
	    			ОписаниеТипа = Новый ОписаниеТипов("Строка", ,КвалификаторыСтроки);
				Иначе
	    			ОписаниеТипа = Новый ОписаниеТипов(Колонка.Ини.Тип);	// например "СправочникСсылка.Сотрудники"
	 			КонецЕсли;
	 		КонецЕсли;
			КолонкаТЗ = РеквизитТаблица.Колонки.Добавить(Колонка.Имя,ОписаниеТипа); 
		КонецЕсли;
		Колонка.Элемент = ЭлементТаблица.Колонки.Найти(Колонка.Имя);
		Если Колонка.Элемент = Неопределено Тогда
			Колонка.Элемент = ЭлементТаблица.Колонки.Вставить(индекс); 
			Колонка.Элемент.Имя = Колонка.Имя;
			Колонка.Элемент.УстановитьЭлементУправления(Тип("ПолеВвода"));	
			Колонка.Элемент.Положение = ПоложениеКолонки.ВТойЖеКолонке;
			Колонка.Элемент.Ширина = 10;
		КонецЕсли;
		Колонка.Элемент.Видимость = Истина;
		Если Колонка.Ини.Свойство("Ширина") Тогда
			Попытка	// у существующих поле переключателей и картинок такого свойства нет
				Колонка.Элемент.Ширина = Колонка.Ини.Ширина;
			Исключение;
			КонецПопытки
		КонецЕсли;
		Если Колонка.Ини.Свойство("Заголовок") Тогда
			Колонка.Элемент.ТекстШапки = Колонка.Ини.Заголовок;
		КонецЕсли;
		Если Колонка.Ини.Свойство("Значение") Тогда
			Колонка.Элемент.Данные = Колонка.Ини.Значение;
		КонецЕсли;
		индекс = индекс +1;
	КонецЦикла;	
КонецПроцедуры

//Процедура управляет включением/отключением вывода логов
&НаКлиенте
Процедура сбисПереключитьОтладку()
	Если РежимОтладки Тогда
		Кэш.Интеграция.ВключитьОтладку(Кэш, КаталогОтладки);
	Иначе
		Кэш.Интеграция.ОтключитьОтладку(Кэш);
	КонецЕсли;	
	
	Кэш.Парам.РежимОтладки	= РежимОтладки;
	Кэш.Парам.КаталогОтладки= КаталогОтладки;
	сбисЭлементФормы(ЭтаФорма, "КаталогОтладки").Видимость = РежимОтладки;
	//+++ МАИ 09.09.2021 Переопределяем сервер обновлений, если пользователь в режиме отладки указал другой
	сбисЭлементФормы(ЭтаФорма, "АдресСервисаОбновлений").Видимость = РежимОтладки;
	сбисЭлементФормы(ЭтаФорма, "НадписьАдресСервисаОбновлений").Видимость = РежимОтладки;	
	Если НЕ РежимОтладки ИЛИ АдресСервисаОбновлений = "" Тогда
		АдресСервисаОбновлений = "update.sbis.ru";
		Кэш.СБИС.ПараметрыИнтеграции.Вставить("АдресСервисаОбновлений", АдресСервисаОбновлений);
	КонецЕсли;
	//--- МАИ 09.09.2021
КонецПроцедуры

//Функция складывает в структуру текущие значения фильтра для последующего их восстановления	
&НаКлиенте
Функция сбисВосстановитьФильтр(Кэш, СтруктураФильта) Экспорт
	ФильтрПериод = СтруктураФильта.ФильтрПериод;
	Значение = Число(ФильтрПериод);
	Если(Значение=0.1) Тогда
		ФильтрДатаНач = ТекущаяДата();
		ФильтрДатаКнц = ТекущаяДата();
	ИначеЕсли(Значение>=1) Тогда
		ФильтрДатаКнц = ТекущаяДата();
		ФильтрДатаНач = ДобавитьМесяц(ФильтрДатаКнц,Значение*-1);
	Иначе
		ФильтрДатаНач = СтруктураФильта.ФильтрДатаНач;
		ФильтрДатаКнц = СтруктураФильта.ФильтрДатаКнц;
	КонецЕсли;
	ФильтрСостояние = СтруктураФильта.ФильтрСостояние;
	ФильтрКонтрагент = СтруктураФильта.ФильтрКонтрагент;
	ФильтрКонтрагентПодключен = СтруктураФильта.ФильтрКонтрагентПодключен;
	ФильтрКонтрагентСФилиалами = ?(СтруктураФильта.Свойство("ФильтрКонтрагентСФилиалами"), СтруктураФильта.ФильтрКонтрагентСФилиалами, Ложь);
	ФильтрОрганизация = СтруктураФильта.ФильтрОрганизация;
	ФильтрСтраница = СтруктураФильта.ФильтрСтраница;
	ФильтрОтветственный = СтруктураФильта.ФильтрОтветственный;
	ФильтрТипыДокументов = СтруктураФильта.ФильтрТипыДокументов;
	ФильтрМаска = СтруктураФильта.ФильтрМаска;
	
	//Заполним дополнительные параметры фильтра
	Если СтруктураФильта.Свойство("ПараметрыФильтра") Тогда
		Для Каждого Элемент Из СтруктураФильта.ПараметрыФильтра Цикл
			Кэш.ПараметрыФильтра.Вставить(Элемент.Ключ,Элемент.Значение);
		КонецЦикла;
	КонецЕсли;
КонецФункции

Процедура ПользовательНажатие(Элемент)
	ОткрытьФормуПереключенияАккаунта();
КонецПроцедуры

