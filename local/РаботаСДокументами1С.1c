
&НаКлиенте
Функция сбисПолучитьФорму(СбисИмяФормы)
	
	Возврат ВладелецФормы.сбисПолучитьФорму(СбисИмяФормы);
	
КонецФункции

&НаКлиенте
Функция НастроитьКолонки(Ини, Кэш) Экспорт
	ИмяЭлементаТаблица = "Таблица_РеестрДокументов";
	ЭлементТаблица = Кэш.ГлавноеОкно.ЭлементыФормы[ИмяЭлементаТаблица];
	Если Кэш.Свойство("РеестрДокументовКолонки") Тогда // привести в исходное состояние
		Для Каждого Колонка из ЭлементТаблица.Колонки Цикл
			Колонка.видимость = ? (Кэш.РеестрДокументовКолонки.Найти(Колонка.Имя) = неопределено, Ложь, Истина);
		КонецЦикла;
	Иначе	// сохранить исходное состояние
		Кэш.вставить("РеестрДокументовКолонки", Новый Массив);
		Для Каждого Колонка из ЭлементТаблица.Колонки Цикл
			Если Колонка.видимость Тогда
				Кэш.РеестрДокументовКолонки.Добавить(Колонка.Имя);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	ВидимыеКолонки = РассчитатьЗначение("Реестр1С_ВидимыеСтолбцы",Ини, Кэш);
	Если ЗначениеЗаполнено(ВидимыеКолонки) Тогда
		Колонки = Новый Массив;	
		Строка = СтрЗаменить(ВидимыеКолонки, ",", Символы.ПС);
		КолЭлементов = СтрЧислоСтрок(Строка);
		Для сч = 1 по КолЭлементов Цикл
			Колонки.Добавить(Новый Структура("Имя,Ини,Элемент",СокрЛП(СтрПолучитьСтроку(Строка,сч)),Новый Структура,Неопределено));
		КонецЦикла;
		
		Кэш.ГлавноеОкно.НастроитьКолонкиНаСервере(ИмяЭлементаТаблица, Колонки, Ини);	
	КонецЕсли;
КонецФункции	

&НаКлиенте
Процедура ОбновитьПанельНавигации(Кэш) Экспорт
	// функция обновляет панель навигации при переходе по страницам в разделах Полученные и Отправленные	
	ГлавноеОкно = Кэш.ГлавноеОкно;
	Кнопки = сбисПолучитьПодчиненныеЭлементы(сбисЭлементФормы(ГлавноеОкно, "КоманднаяПанельНавигация"),"Кнопки");
	ТекущаяСтраница = ГлавноеОкно.ФильтрСтраница;
	ЕстьЕще = ГлавноеОкно.ФильтрЕстьЕще;
	сбисУстановитьСвойствоЭлементаФормы(Кнопки.НавигацияТекущаяСтраница, ТекущаяСтраница);
	Если ТекущаяСтраница = 1 Тогда
		Кнопки.НавигацияПерваяСтраница.Доступность = Ложь;
		Кнопки.НавигацияПредыдущаяСтраница.Доступность = Ложь;
	КонецЕсли;
	Если ТекущаяСтраница > 1 Тогда
		Кнопки.НавигацияПерваяСтраница.Доступность = Истина;
		Кнопки.НавигацияПредыдущаяСтраница.Доступность = Истина;
	КонецЕсли;
	Если ЕстьЕще Тогда
		Если Кэш.Текущий.Раздел = "1" или Кэш.Текущий.Раздел = "2" или Кэш.Текущий.Раздел = "7" или Кэш.Текущий.Раздел = "8" Тогда   // списочные методы с онлайна не возвращают последнюю страницу
			Кнопки.НавигацияПоследняяСтраница.Доступность = Ложь;
		Иначе
			Кнопки.НавигацияПоследняяСтраница.Доступность = Истина;
		КонецЕсли;
		Кнопки.НавигацияСледующаяСтраница.Доступность = Истина;
	Иначе
		Кнопки.НавигацияПоследняяСтраница.Доступность = Ложь;
		Кнопки.НавигацияСледующаяСтраница.Доступность = Ложь;
	КонецЕсли;
КонецПроцедуры	

&НаКлиенте
Функция ЗначениеИТипСтавки(Ставка) Экспорт
	// Функция возвращает значение и тип ставки НДС
	СтрСтавка = Новый Структура;
	Попытка
		ИмяПеречисления = Ставка.Метаданные().Имя;
		Индекс = Перечисления[ИмяПеречисления].Индекс(Ставка);
		СтавкаСиноним = Метаданные.Перечисления[ИмяПеречисления].ЗначенияПеречисления.Получить(Индекс).Синоним;
	Исключение
		Попытка
			СтавкаСиноним = Строка(Ставка);
		Исключение
			СтавкаСиноним = "";
		КонецПопытки;
	КонецПопытки;
	
	Если Найти(СтавкаСиноним,"20% / 120%") > 0 или Найти(СтавкаСиноним,"20/120") > 0 Тогда
		СтрСтавка.Вставить("Ставка","20/120");
		СтрСтавка.Вставить("ТипСтавки","дробь");
		Возврат СтрСтавка;
	ИначеЕсли Найти(СтавкаСиноним,"20%") > 0 Тогда
		СтрСтавка.Вставить("Ставка","20");
		СтрСтавка.Вставить("ТипСтавки","процент");
		Возврат СтрСтавка;
	ИначеЕсли Найти(СтавкаСиноним,"18% / 118%") > 0 или Найти(СтавкаСиноним,"18/118") > 0 Тогда
		СтрСтавка.Вставить("Ставка","18/118");
		СтрСтавка.Вставить("ТипСтавки","дробь");
		Возврат СтрСтавка;
	ИначеЕсли Найти(СтавкаСиноним,"18%") > 0 Тогда
		СтрСтавка.Вставить("Ставка","18");
		СтрСтавка.Вставить("ТипСтавки","процент");
		Возврат СтрСтавка;        
	ИначеЕсли Найти(СтавкаСиноним,"10% / 110%") > 0 или Найти(СтавкаСиноним,"10/110") > 0 Тогда
		СтрСтавка.Вставить("Ставка","10/110");
		СтрСтавка.Вставить("ТипСтавки","дробь");
		Возврат СтрСтавка; 
	ИначеЕсли Найти(СтавкаСиноним,"10%") > 0 Тогда
		СтрСтавка.Вставить("Ставка","10");
		СтрСтавка.Вставить("ТипСтавки","процент");
		Возврат СтрСтавка;
	ИначеЕсли Найти(СтавкаСиноним,"0%") > 0 Тогда
		СтрСтавка.Вставить("Ставка","0");
		СтрСтавка.Вставить("ТипСтавки","процент");
		Возврат СтрСтавка;
	ИначеЕсли Найти(СтавкаСиноним,"НДС исчисляется налоговым агентом") > 0 Тогда
		СтрСтавка.Вставить("Ставка","НДС исчисляется налоговым агентом");
		СтрСтавка.Вставить("ТипСтавки","текст");
		Возврат СтрСтавка;
	Иначе
		СтрСтавка.Вставить("Ставка","без НДС");
		СтрСтавка.Вставить("ТипСтавки","текст");
		Возврат СтрСтавка;	
	КонецЕсли;
	
КонецФункции

&НаКлиенте
функция ДобавитьДокументыЮЗДО(МестныйКэш,ФормаПросмотра) экспорт
	ЕстьСвязанныйДокумент=Ложь;
	Если ФормаПросмотра.СоставПакета.Свойство("Вложение") Тогда
		ИниТекущегоРеестра = МестныйКэш.Текущий.ТипДок;	
		Документы1С=Новый СписокЗначений;
		Для Каждого Вложение Из ФормаПросмотра.СоставПакета.Вложение Цикл
			Для Каждого Документ Из Вложение.Документы1С Цикл
				Если Документы1С.НайтиПоЗначению(Документ.Значение) = Неопределено Тогда
					Документы1С.Добавить(Документ.Значение);
					ЕстьСвязанныйДокумент=Истина;
				конецесли;
			КонецЦикла;
		КонецЦикла;
		Для Каждого Документ Из Документы1С Цикл
			ИмяДокумента = МестныйКэш.ОбщиеФункции.ПолучитьРеквизитМетаданныхОбъекта(Документ.Значение, "Имя");
			//Получим настройки документа
			СписокИни = Новый СписокЗначений;
			Для Каждого Ини Из МестныйКэш.Ини Цикл
				ЗначениеИни = МестныйКэш.ФормаНастроек.Ини(МестныйКэш, Ини.Ключ);
				Если ЗначениеИни.Свойство("Реестр1С_Тип") и ЗначениеИни.Свойство("ЗапросСпискаДокументов") Тогда
					Реестр1С_Тип = МестныйКэш.ОбщиеФункции.РассчитатьЗначение("Реестр1С_Тип", ЗначениеИни, МестныйКэш);
					Если Реестр1С_Тип = ИмяДокумента Тогда
						Реестр1С_Название = МестныйКэш.ОбщиеФункции.РассчитатьЗначение("Реестр1С_Название", ЗначениеИни, МестныйКэш);
						СписокИни.Добавить(Ини.Ключ, ?(ЗначениеЗаполнено(Реестр1С_Название),Реестр1С_Название,Реестр1С_Тип));
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			Если СписокИни.Количество() = 0 тогда
				Если МестныйКэш.ини.Свойство(ИмяДокумента) Тогда	
					СписокИни.Добавить(ИмяДокумента, ИмяДокумента);
				Иначе
					Сообщить("Выгрузка данного документов "+ИмяДокумента+" не поддерживается!");
				КонецЕсли;
			КонецЕсли;
			Если СписокИни.Количество() = 1 Тогда
				ИмяИни = СписокИни[0].Значение;
			Иначе
				Форма_ВыборИзСписка = сбисПолучитьФорму("Форма_ВыборИзСписка");
				Форма_ВыборИзСписка.СписокДляВыбора = СписокИни;
				Форма_ВыборИзСписка.Заголовок ="Выберите настройку для формирования документов для "+Документ.Значение;
				ИмяИни = Форма_ВыборИзСписка.ОткрытьМодально();
			КонецЕсли;
			Если ЗначениеЗаполнено(ИмяИни) Тогда
				ДозаписьПослеВыбораИни(ИмяИни, Новый Структура("Документ,ФормаПросмотра",Документ.Значение,ФормаПросмотра));
			КонецЕсли;
		КонецЦикла;
		МестныйКэш.Текущий.ТипДок = ИниТекущегоРеестра;	
	КонецЕсли;
	Если не ЕстьСвязанныйДокумент Тогда
		Сообщить("Нет сопоставленного документа 1С!");
	КонецЕсли;
КонецФункции

